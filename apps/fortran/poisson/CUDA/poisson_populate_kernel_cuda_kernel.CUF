!
! auto-generated by ops_fortran.py
!
MODULE POISSON_POPULATE_KERNEL_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

INTEGER(KIND=4), constant :: xdim4_poisson_populate_kernel
INTEGER(KIND=4):: xdim4_poisson_populate_kernel_h  = -1
#define OPS_ACC4(x,y) (x+xdim4_poisson_populate_kernel_poisson_populate_kernel*(y)+1)
INTEGER(KIND=4), constant :: xdim5_poisson_populate_kernel
INTEGER(KIND=4):: xdim5_poisson_populate_kernel_h  = -1
#define OPS_ACC5(x,y) (x+xdim5_poisson_populate_kernel_poisson_populate_kernel*(y)+1)
INTEGER(KIND=4), constant :: xdim6_poisson_populate_kernel
INTEGER(KIND=4):: xdim6_poisson_populate_kernel_h  = -1
#define OPS_ACC6(x,y) (x+xdim6_poisson_populate_kernel_poisson_populate_kernel*(y)+1)


contains

!user function
attributes (device) subroutine poisson_populate_kernel(dispx, dispy, idx, u, f, ref)

  integer (kind=4), DIMENSION(1), INTENT(IN) :: dispx, dispy, idx
  real (kind=8), DIMENSION(1) :: u, f, ref
  real(8) x, y
  real, parameter :: M_PI = 4.D0*DATAN(1.D0)

  x = dx * (idx(1)+dispx(1))
  y = dy * (idx(2)+dispy(1))

  u(OPS_ACC4(0,0)) = sin(M_PI*x)*cos(2.0*M_PI*y)
  f(OPS_ACC5(0,0)) = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y)
  ref(OPS_ACC6(0,0)) = sin(M_PI*x)*cos(2.0*M_PI*y)

end subroutine

#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6



!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine poisson_populate_kernel_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& idx, &
& opsDat4Local, &
& opsDat5Local, &
& opsDat6Local, &
& dat1_base, &
& dat2_base, &
& dat4_base, &
& dat5_base, &
& dat6_base, &
& size1, size2, &
& start, &
& end )
  IMPLICIT NONE
  integer(4) opsDat1Local(1)
  integer(4) opsDat2Local(1)
  integer(4) idx(2),idx_local(2)
  real(8), DEVICE :: opsDat4Local(*)
  integer(4) arg4
  real(8), DEVICE :: opsDat5Local(*)
  integer(4) arg5
  real(8), DEVICE :: opsDat6Local(*)
  integer(4) arg6
  integer dat1_base
  integer dat2_base
  integer dat4_base
  integer dat5_base
  integer dat6_base
  integer(4) start(2)
  integer(4) end(2)
  integer(4) d
  integer n_x, n_y, size1, size2



  n_y = blockDim%y * blockIdx%y + threadIdx%y
  n_x = blockDim%x * blockIdx%x + threadIdx%x

  idx_local(1) = idx(1)+ n_x-1
  idx_local(2) = idx(2)+ n_y-1
  arg4 = arg4 + (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_poisson_populate_kernel
  arg5 = arg5 + (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim5_poisson_populate_kernel
  arg6 = arg6 + (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim6_poisson_populate_kernel
  IF (n_x < size1 .AND. n_y < size2) THEN
    call poisson_populate_kernel( &
    & opsDat1Local, &
    & opsDat2Local, &
    & idx_local, &
    & opsDat4Local(arg4), &
    & opsDat5Local(arg5), &
    & opsDat6Local(arg6) )
  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine poisson_populate_kernel_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6)
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(dim), INTENT(IN) :: range

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  integer(4), POINTER, DEVICE, DIMENSION(:) :: opsDat1Local
  integer(kind=4), DEVICE :: dat1_base

  type ( ops_arg )  , INTENT(IN) :: opsArg2
  integer(4), POINTER, DEVICE, DIMENSION(:) :: opsDat2Local
  integer(kind=4), DEVICE :: dat2_base

  type ( ops_arg )  , INTENT(IN) :: opsArg3

  type ( ops_arg )  , INTENT(IN) :: opsArg4
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE  :: opsDat4Local
  integer(kind=4) :: opsDat4Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat4_size
  integer(kind=4), DEVICE  :: dat4_base
  INTEGER(KIND=4) :: xdim4
  integer ydim4

  type ( ops_arg )  , INTENT(IN) :: opsArg5
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE  :: opsDat5Local
  integer(kind=4) :: opsDat5Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat5_size
  integer(kind=4), DEVICE  :: dat5_base
  INTEGER(KIND=4) :: xdim5
  integer ydim5

  type ( ops_arg )  , INTENT(IN) :: opsArg6
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE  :: opsDat6Local
  integer(kind=4) :: opsDat6Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat6_size
  integer(kind=4), DEVICE  :: dat6_base
  INTEGER(KIND=4) :: xdim6
  integer ydim6

  integer, DEVICE :: x_size, y_size
  integer start(2)
  integer, DEVICE :: start_d(2)
  integer end(2)
  integer, DEVICE :: end_d(2)
  integer, DEVICE :: idx(2)
  integer(kind=4) :: n

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type ( ops_arg ) , DIMENSION(6) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6

#ifdef OPS_MPI
  call getRange(block, start, end, range)
  DO n = 1, 2
    start_d(n) = start(n)
    end_d(n) = end(n)
  END DO
#else
  DO n = 1, 2
    start(n) = range(2*n-1)
    end(n) = range(2*n)
    start_d(n) = range(2*n-1)
    end_d(n) = range(2*n)
  END DO
#endif

#ifdef OPS_MPI
  call getIdx(block,start,idx)
#else
  idx(1) = start(1)
  idx(2) = start(2)
#endif


  x_size = MAX(0,end(1)-start(1))
  y_size = MAX(0,end(2)-start(2))

  call c_f_pointer(getGblPtrFromOpsArg(opsArg1),opsDat1Local, (/opsArg1%dim/))
  dat1_base = 1

  call c_f_pointer(getGblPtrFromOpsArg(opsArg2),opsDat2Local, (/opsArg2%dim/))
  dat2_base = 1

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4
  dat4_base = getDatBaseFromOpsArg2D(opsArg4,start,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg5),dat5_size,(/dim/))
  xdim5 = dat5_size(1)
  ydim5 = dat5_size(2)
  opsDat5Cardinality = opsArg5%dim * xdim5 * ydim5
  dat5_base = getDatBaseFromOpsArg2D(opsArg5,start,1)
  call c_f_pointer(opsArg5%data_d,opsDat5Local,(/opsDat5Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg6),dat6_size,(/dim/))
  xdim6 = dat6_size(1)
  ydim6 = dat6_size(2)
  opsDat6Cardinality = opsArg6%dim * xdim6 * ydim6
  dat6_base = getDatBaseFromOpsArg2D(opsArg6,start,1)
  call c_f_pointer(opsArg6%data_d,opsDat6Local,(/opsDat6Cardinality/))

  IF ((xdim4 .NE. xdim4_poisson_populate_kernel_h) .OR. (xdim5 .NE. xdim5_poisson_populate_kernel_h) .OR. (xdim6 .NE. xdim6_poisson_populate_kernel_h) ) THEN
    xdim4_poisson_populate_kernel = xdim4
    xdim4_poisson_populate_kernel_h = xdim4
    xdim5_poisson_populate_kernel = xdim5
    xdim5_poisson_populate_kernel_h = xdim5
    xdim6_poisson_populate_kernel = xdim6
    xdim6_poisson_populate_kernel_h = xdim6
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, 1)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)

  call ops_H_D_exchanges_device(opsArgArray,6)
  call ops_halo_exchanges(opsArgArray,6,range)

  call poisson_populate_kernel_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & idx, &
  & opsDat4Local, &
  & opsDat5Local, &
  & opsDat6Local, &
  & dat1_base, &
  & dat2_base, &
  & dat4_base, &
  & dat5_base, &
  & dat6_base, &
  & x_size, y_size, &
  & start_d, &
  & end_d )

  call ops_set_dirtybit_device(opsArgArray, 6)
  call ops_set_halo_dirtybit3(opsArg4,range)
  call ops_set_halo_dirtybit3(opsArg5,range)
  call ops_set_halo_dirtybit3(opsArg6,range)

end subroutine
END MODULE
