!
! auto-generated by ops_fortran.py
!
MODULE POISSON_ERROR_KERNEL_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

INTEGER(KIND=4), constant :: xdim1_poisson_error_kernel
INTEGER(KIND=4):: xdim1_poisson_error_kernel_h  = -1
#define OPS_ACC1(x,y) (x+xdim1_poisson_error_kernel_poisson_error_kernel*(y)+1)
INTEGER(KIND=4), constant :: xdim2_poisson_error_kernel
INTEGER(KIND=4):: xdim2_poisson_error_kernel_h  = -1
#define OPS_ACC2(x,y) (x+xdim2_poisson_error_kernel_poisson_error_kernel*(y)+1)


contains

!user function
attributes (device) subroutine poisson_error_kernel(u, ref, err)

  real (kind=8), DIMENSION(1), intent(in):: u, ref
  real (kind=8) :: err

  err = err + (u(OPS_ACC1(0,0))-ref(OPS_ACC2(0,0)))*(u(OPS_ACC1(0,0))-ref(OPS_ACC2(0,0)))

end subroutine


#undef OPS_ACC1
#undef OPS_ACC2



!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine poisson_error_kernel_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& size1, size2, &
& start, &
& end )
  IMPLICIT NONE
  real(8), DEVICE, INTENT(IN) :: opsDat1Local(*)
  integer(4) arg1
  real(8), DEVICE, INTENT(IN) :: opsDat2Local(*)
  integer(4) arg2
  real(8) opsDat3Local(1)
  integer dat1_base
  integer dat2_base
  integer dat3_base
  integer(4) start(2)
  integer(4) end(2)
  integer(4) d
  integer n_x, n_y, size1, size2


  real(8) arg2_l(1)
  DO d = 1, 1
    arg2_l(d) = 0
  END DO

  n_y = blockDim%y * blockIdx%y + threadIdx%y
  n_x = blockDim%x * blockIdx%x + threadIdx%x

  arg1 = arg1 + (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_poisson_error_kernel
  arg2 = arg2 + (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_poisson_error_kernel
  IF (n_x < size1 .AND. n_y < size2) THEN
    call poisson_error_kernel( &
    & opsDat1Local(arg1), &
    & opsDat2Local(arg2), &
    & opsDat3Local )
  ENDIF

  !CALL ReductionFloat

end subroutine

!host subroutine
attributes (host) subroutine poisson_error_kernel_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3)
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(dim), INTENT(IN) :: range

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE  :: opsDat1Local
  integer(kind=4) :: opsDat1Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat1_size
  integer(kind=4), DEVICE  :: dat1_base
  INTEGER(KIND=4) :: xdim1
  integer ydim1

  type ( ops_arg )  , INTENT(IN) :: opsArg2
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE  :: opsDat2Local
  integer(kind=4) :: opsDat2Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat2_size
  integer(kind=4), DEVICE  :: dat2_base
  INTEGER(KIND=4) :: xdim2
  integer ydim2

  type ( ops_arg )  , INTENT(IN) :: opsArg3
  real(8), POINTER, DEVICE, DIMENSION(:) :: opsDat3Local
  integer(kind=4), DEVICE :: dat3_base

  integer, DEVICE :: x_size, y_size
  integer start(2)
  integer, DEVICE :: start_d(2)
  integer end(2)
  integer, DEVICE :: end_d(2)
  integer(kind=4) :: n

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type ( ops_arg ) , DIMENSION(3) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3

#ifdef OPS_MPI
  call getRange(block, start, end, range)
  DO n = 1, 2
    start_d(n) = start(n)
    end_d(n) = end(n)
  END DO
#else
  DO n = 1, 2
    start(n) = range(2*n-1)
    end(n) = range(2*n)
    start_d(n) = range(2*n-1)
    end_d(n) = range(2*n)
  END DO
#endif


  x_size = MAX(0,end(1)-start(1))
  y_size = MAX(0,end(2)-start(2))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1
  dat1_base = getDatBaseFromOpsArg2D(opsArg1,start,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2
  dat2_base = getDatBaseFromOpsArg2D(opsArg2,start,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getReductionPtrFromOpsArg(opsArg3,block),opsDat3Local, (/opsArg3%dim/))
  dat3_base = 1

  IF ((xdim1 .NE. xdim1_poisson_error_kernel_h) .OR. (xdim2 .NE. xdim2_poisson_error_kernel_h) ) THEN
    xdim1_poisson_error_kernel = xdim1
    xdim1_poisson_error_kernel_h = xdim1
    xdim2_poisson_error_kernel = xdim2
    xdim2_poisson_error_kernel_h = xdim2
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, 1)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)

  call ops_H_D_exchanges_device(opsArgArray,3)
  call ops_halo_exchanges(opsArgArray,3,range)

  call poisson_error_kernel_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & x_size, y_size, &
  & start_d, &
  & end_d )

  call ops_set_dirtybit_device(opsArgArray, 3)

end subroutine
END MODULE
