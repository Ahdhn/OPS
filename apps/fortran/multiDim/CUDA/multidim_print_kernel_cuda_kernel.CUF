!
! auto-generated by ops_fortran.py
!
MODULE MULTIDIM_PRINT_KERNEL_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING


INTEGER(KIND=4), constant :: xdim1_multidim_print_kernel
#define OPS_ACC_MD1(d,x,y) ((x)*2+(d)+(xdim1_multidim_print_kernel*(y)*2))

contains

!user function
!DEC$ ATTRIBUTES FORCEINLINE :: multidim_print_kernel
attributes (device) subroutine multidim_print_kernel(val)
  IMPLICIT NONE
  REAL   (kind=8), DIMENSION(2) :: val

end subroutine


#undef OPS_ACC_MD1


!CUDA kernel function
attributes (global) subroutine multidim_print_kernel_wrap( &
& opsDat1Local, &
& dat1_base, &
& size1, size2, &
& start, &
& end )
  IMPLICIT NONE
  real(8), DEVICE, INTENT(IN) :: opsDat1Local(*)
  integer(4) arg1
  integer dat1_base
  integer(4) start(2)
  integer(4) end(2)
  integer n_x, n_y, size1, size2


  n_y = blockDim%y * blockIdx%y + threadIdx%y
  n_x = blockDim%x * blockIdx%x + threadIdx%x

  arg1 = arg1 + n_x * 1*2 + n_y * 1*2 * xdim1_multidim_print_kernel
  IF (n_x < size1 .AND. n_y < size2) THEN
    call multidim_print_kernel( &
    & opsDat1Local(arg1) )
  ENDIF
end subroutine

!host subroutine
attributes (host) subroutine multidim_print_kernel_host( userSubroutine, block, dim, range, &
& opsArg1)
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(dim), INTENT(IN) :: range

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  real(8), POINTER, DIMENSION(:) :: opsDat1Local
  integer(kind=4) :: opsDat1Cardinality
  integer(kind=4) , POINTER, DIMENSION(:)  :: dat1_size
  integer(kind=4) :: dat1_base
  integer ydim1

end subroutine
END MODULE
