Only in ../MPI_CUDA/: accelerate.cpp
diff CUDA/accelerate_kernel_cuda_kernel.cu ../MPI_CUDA/accelerate_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
174c174
<   ops_timing_realloc(6,"accelerate_kernel");
---
>   ops_timing_realloc(7,"accelerate_kernel");
177c177
<   if (OPS_kernels[6].count == 0) {
---
>   if (OPS_kernels[7].count == 0) {
306,318c306,318
<   OPS_kernels[6].count++;
<   OPS_kernels[6].time += t2-t1;
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg7);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg8);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg9);
<   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg10);
---
>   OPS_kernels[7].count++;
>   OPS_kernels[7].time += t2-t1;
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg7);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg8);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg9);
>   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg10);
Only in ../MPI_CUDA/: accelerate_kernel.h
Only in ../MPI_CUDA/: accelerate_ops.cpp
Only in ../MPI_CUDA/: advec_cell.cpp
diff CUDA/advec_cell_kernel1_xdir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel1_xdir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
104c104
<   ops_timing_realloc(7,"advec_cell_kernel1_xdir");
---
>   ops_timing_realloc(8,"advec_cell_kernel1_xdir");
107c107
<   if (OPS_kernels[7].count == 0) {
---
>   if (OPS_kernels[8].count == 0) {
179,185c179,185
<   OPS_kernels[7].count++;
<   OPS_kernels[7].time += t2-t1;
<   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[7].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[8].count++;
>   OPS_kernels[8].time += t2-t1;
>   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_cell_kernel1_ydir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel1_ydir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
104c104
<   ops_timing_realloc(11,"advec_cell_kernel1_ydir");
---
>   ops_timing_realloc(12,"advec_cell_kernel1_ydir");
107c107
<   if (OPS_kernels[11].count == 0) {
---
>   if (OPS_kernels[12].count == 0) {
179,185c179,185
<   OPS_kernels[11].count++;
<   OPS_kernels[11].time += t2-t1;
<   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[12].count++;
>   OPS_kernels[12].time += t2-t1;
>   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_cell_kernel2_xdir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel2_xdir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
95c95
<   ops_timing_realloc(8,"advec_cell_kernel2_xdir");
---
>   ops_timing_realloc(9,"advec_cell_kernel2_xdir");
98c98
<   if (OPS_kernels[8].count == 0) {
---
>   if (OPS_kernels[9].count == 0) {
160,165c160,165
<   OPS_kernels[8].count++;
<   OPS_kernels[8].time += t2-t1;
<   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[8].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[9].count++;
>   OPS_kernels[9].time += t2-t1;
>   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg3);
diff CUDA/advec_cell_kernel2_ydir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel2_ydir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
95c95
<   ops_timing_realloc(12,"advec_cell_kernel2_ydir");
---
>   ops_timing_realloc(13,"advec_cell_kernel2_ydir");
98c98
<   if (OPS_kernels[12].count == 0) {
---
>   if (OPS_kernels[13].count == 0) {
160,165c160,165
<   OPS_kernels[12].count++;
<   OPS_kernels[12].time += t2-t1;
<   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[12].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[13].count++;
>   OPS_kernels[13].time += t2-t1;
>   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg3);
diff CUDA/advec_cell_kernel3_xdir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel3_xdir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
35d34
<   int x_max=field.x_max;
182c181
<   ops_timing_realloc(9,"advec_cell_kernel3_xdir");
---
>   ops_timing_realloc(10,"advec_cell_kernel3_xdir");
185c184
<   if (OPS_kernels[9].count == 0) {
---
>   if (OPS_kernels[10].count == 0) {
285,294c284,293
<   OPS_kernels[9].count++;
<   OPS_kernels[9].time += t2-t1;
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[9].transfer += ops_compute_transfer(dim, range, &arg7);
---
>   OPS_kernels[10].count++;
>   OPS_kernels[10].time += t2-t1;
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg7);
diff CUDA/advec_cell_kernel3_ydir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel3_ydir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
35d34
<   int y_max=field.y_max;
182c181
<   ops_timing_realloc(13,"advec_cell_kernel3_ydir");
---
>   ops_timing_realloc(14,"advec_cell_kernel3_ydir");
185c184
<   if (OPS_kernels[13].count == 0) {
---
>   if (OPS_kernels[14].count == 0) {
285,294c284,293
<   OPS_kernels[13].count++;
<   OPS_kernels[13].time += t2-t1;
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[13].transfer += ops_compute_transfer(dim, range, &arg7);
---
>   OPS_kernels[14].count++;
>   OPS_kernels[14].time += t2-t1;
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg7);
diff CUDA/advec_cell_kernel4_xdir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel4_xdir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
149c149
<   ops_timing_realloc(10,"advec_cell_kernel4_xdir");
---
>   ops_timing_realloc(11,"advec_cell_kernel4_xdir");
152c152
<   if (OPS_kernels[10].count == 0) {
---
>   if (OPS_kernels[11].count == 0) {
281,293c281,293
<   OPS_kernels[10].count++;
<   OPS_kernels[10].time += t2-t1;
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg7);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg8);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg9);
<   OPS_kernels[10].transfer += ops_compute_transfer(dim, range, &arg10);
---
>   OPS_kernels[11].count++;
>   OPS_kernels[11].time += t2-t1;
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg7);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg8);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg9);
>   OPS_kernels[11].transfer += ops_compute_transfer(dim, range, &arg10);
diff CUDA/advec_cell_kernel4_ydir_cuda_kernel.cu ../MPI_CUDA/advec_cell_kernel4_ydir_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
149c149
<   ops_timing_realloc(14,"advec_cell_kernel4_ydir");
---
>   ops_timing_realloc(15,"advec_cell_kernel4_ydir");
152c152
<   if (OPS_kernels[14].count == 0) {
---
>   if (OPS_kernels[15].count == 0) {
281,293c281,293
<   OPS_kernels[14].count++;
<   OPS_kernels[14].time += t2-t1;
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg7);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg8);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg9);
<   OPS_kernels[14].transfer += ops_compute_transfer(dim, range, &arg10);
---
>   OPS_kernels[15].count++;
>   OPS_kernels[15].time += t2-t1;
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg7);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg8);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg9);
>   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg10);
Only in ../MPI_CUDA/: advec_cell_kernel.h
Only in ../MPI_CUDA/: advec_cell_ops.cpp
Only in ../MPI_CUDA/: advec_mom.cpp
diff CUDA/advec_mom_kernel1_x_nonvector_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel1_x_nonvector_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
142c142
<   ops_timing_realloc(21,"advec_mom_kernel1_x_nonvector");
---
>   ops_timing_realloc(22,"advec_mom_kernel1_x_nonvector");
145c145
<   if (OPS_kernels[21].count == 0) {
---
>   if (OPS_kernels[22].count == 0) {
217,223c217,223
<   OPS_kernels[21].count++;
<   OPS_kernels[21].time += t2-t1;
<   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[22].count++;
>   OPS_kernels[22].time += t2-t1;
>   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_mom_kernel1_y_nonvector_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel1_y_nonvector_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
136c136
<   ops_timing_realloc(25,"advec_mom_kernel1_y_nonvector");
---
>   ops_timing_realloc(26,"advec_mom_kernel1_y_nonvector");
139c139
<   if (OPS_kernels[25].count == 0) {
---
>   if (OPS_kernels[26].count == 0) {
211,217c211,217
<   OPS_kernels[25].count++;
<   OPS_kernels[25].time += t2-t1;
<   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[26].count++;
>   OPS_kernels[26].time += t2-t1;
>   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_mom_kernel2_x_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel2_x_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
95c95
<   ops_timing_realloc(22,"advec_mom_kernel2_x");
---
>   ops_timing_realloc(23,"advec_mom_kernel2_x");
98c98
<   if (OPS_kernels[22].count == 0) {
---
>   if (OPS_kernels[23].count == 0) {
160,165c160,165
<   OPS_kernels[22].count++;
<   OPS_kernels[22].time += t2-t1;
<   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[22].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[23].count++;
>   OPS_kernels[23].time += t2-t1;
>   OPS_kernels[23].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[23].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[23].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[23].transfer += ops_compute_transfer(dim, range, &arg3);
diff CUDA/advec_mom_kernel2_y_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel2_y_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
94c94
<   ops_timing_realloc(26,"advec_mom_kernel2_y");
---
>   ops_timing_realloc(27,"advec_mom_kernel2_y");
97c97
<   if (OPS_kernels[26].count == 0) {
---
>   if (OPS_kernels[27].count == 0) {
159,164c159,164
<   OPS_kernels[26].count++;
<   OPS_kernels[26].time += t2-t1;
<   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[26].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[27].count++;
>   OPS_kernels[27].time += t2-t1;
>   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg3);
Only in ../MPI_CUDA/: advec_mom_kernel.h
diff CUDA/advec_mom_kernel_mass_flux_x_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_mass_flux_x_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(19,"advec_mom_kernel_mass_flux_x");
---
>   ops_timing_realloc(20,"advec_mom_kernel_mass_flux_x");
85c85
<   if (OPS_kernels[19].count == 0) {
---
>   if (OPS_kernels[20].count == 0) {
128,131c128,131
<   OPS_kernels[19].count++;
<   OPS_kernels[19].time += t2-t1;
<   OPS_kernels[19].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[19].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[20].count++;
>   OPS_kernels[20].time += t2-t1;
>   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/advec_mom_kernel_mass_flux_y_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_mass_flux_y_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(23,"advec_mom_kernel_mass_flux_y");
---
>   ops_timing_realloc(24,"advec_mom_kernel_mass_flux_y");
85c85
<   if (OPS_kernels[23].count == 0) {
---
>   if (OPS_kernels[24].count == 0) {
128,131c128,131
<   OPS_kernels[23].count++;
<   OPS_kernels[23].time += t2-t1;
<   OPS_kernels[23].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[23].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[24].count++;
>   OPS_kernels[24].time += t2-t1;
>   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/advec_mom_kernel_post_pre_advec_x_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_post_pre_advec_x_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
109c109
<   ops_timing_realloc(20,"advec_mom_kernel_post_pre_advec_x");
---
>   ops_timing_realloc(21,"advec_mom_kernel_post_pre_advec_x");
112c112
<   if (OPS_kernels[20].count == 0) {
---
>   if (OPS_kernels[21].count == 0) {
184,190c184,190
<   OPS_kernels[20].count++;
<   OPS_kernels[20].time += t2-t1;
<   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[20].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[21].count++;
>   OPS_kernels[21].time += t2-t1;
>   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[21].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_mom_kernel_post_pre_advec_y_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_post_pre_advec_y_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
109c109
<   ops_timing_realloc(24,"advec_mom_kernel_post_pre_advec_y");
---
>   ops_timing_realloc(25,"advec_mom_kernel_post_pre_advec_y");
112c112
<   if (OPS_kernels[24].count == 0) {
---
>   if (OPS_kernels[25].count == 0) {
184,190c184,190
<   OPS_kernels[24].count++;
<   OPS_kernels[24].time += t2-t1;
<   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[24].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[25].count++;
>   OPS_kernels[25].time += t2-t1;
>   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[25].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_mom_kernel_x1_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_x1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
104c104
<   ops_timing_realloc(15,"advec_mom_kernel_x1");
---
>   ops_timing_realloc(16,"advec_mom_kernel_x1");
107c107
<   if (OPS_kernels[15].count == 0) {
---
>   if (OPS_kernels[16].count == 0) {
179,185c179,185
<   OPS_kernels[15].count++;
<   OPS_kernels[15].time += t2-t1;
<   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[15].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[16].count++;
>   OPS_kernels[16].time += t2-t1;
>   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_mom_kernel_x2_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_x2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
96c96
<   ops_timing_realloc(17,"advec_mom_kernel_x2");
---
>   ops_timing_realloc(18,"advec_mom_kernel_x2");
99c99
<   if (OPS_kernels[17].count == 0) {
---
>   if (OPS_kernels[18].count == 0) {
161,166c161,166
<   OPS_kernels[17].count++;
<   OPS_kernels[17].time += t2-t1;
<   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[18].count++;
>   OPS_kernels[18].time += t2-t1;
>   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg3);
diff CUDA/advec_mom_kernel_y1_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_y1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
104c104
<   ops_timing_realloc(16,"advec_mom_kernel_y1");
---
>   ops_timing_realloc(17,"advec_mom_kernel_y1");
107c107
<   if (OPS_kernels[16].count == 0) {
---
>   if (OPS_kernels[17].count == 0) {
179,185c179,185
<   OPS_kernels[16].count++;
<   OPS_kernels[16].time += t2-t1;
<   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[16].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[17].count++;
>   OPS_kernels[17].time += t2-t1;
>   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[17].transfer += ops_compute_transfer(dim, range, &arg4);
diff CUDA/advec_mom_kernel_y2_cuda_kernel.cu ../MPI_CUDA/advec_mom_kernel_y2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
96c96
<   ops_timing_realloc(18,"advec_mom_kernel_y2");
---
>   ops_timing_realloc(19,"advec_mom_kernel_y2");
99c99
<   if (OPS_kernels[18].count == 0) {
---
>   if (OPS_kernels[19].count == 0) {
161,166c161,166
<   OPS_kernels[18].count++;
<   OPS_kernels[18].time += t2-t1;
<   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[18].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[19].count++;
>   OPS_kernels[19].time += t2-t1;
>   OPS_kernels[19].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[19].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[19].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[19].transfer += ops_compute_transfer(dim, range, &arg3);
Only in ../MPI_CUDA/: advec_mom_ops.cpp
Only in ../MPI_CUDA/: advection.cpp
Only in ../MPI_CUDA/: build_field.cpp
Only in ../MPI_CUDA/: calc_dt.cpp
diff CUDA/calc_dt_kernel_cuda_kernel.cu ../MPI_CUDA/calc_dt_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
37c37
<   double div, dsx, dsy, dtut, dtvt, dtct, dtdivt, cc, dv1, dv2, jk_control;
---
>   double div, dsx, dsy, dtut, dtvt, dtct, dtdivt, cc, dv1, dv2;
178c178
<   ops_timing_realloc(27,"calc_dt_kernel");
---
>   ops_timing_realloc(28,"calc_dt_kernel");
181c181
<   if (OPS_kernels[27].count == 0) {
---
>   if (OPS_kernels[28].count == 0) {
310,322c310,322
<   OPS_kernels[27].count++;
<   OPS_kernels[27].time += t2-t1;
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg7);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg8);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg9);
<   OPS_kernels[27].transfer += ops_compute_transfer(dim, range, &arg10);
---
>   OPS_kernels[28].count++;
>   OPS_kernels[28].time += t2-t1;
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg7);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg8);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg9);
>   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg10);
diff CUDA/calc_dt_kernel_get_cuda_kernel.cu ../MPI_CUDA/calc_dt_kernel_get_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
34a35,36
>   for (int d=0; d<1; d++) arg2_l[d] = ZERO_double;
>   for (int d=0; d<1; d++) arg3_l[d] = ZERO_double;
44a47,50
>   for (int d=0; d<1; d++)
>     ops_reduction<OPS_INC>(&arg2[d+blockIdx.x + blockIdx.y*gridDim.x],arg2_l[d]);
>   for (int d=0; d<1; d++)
>     ops_reduction<OPS_INC>(&arg3[d+blockIdx.x + blockIdx.y*gridDim.x],arg3_l[d]);
84c90
<   ops_timing_realloc(29,"calc_dt_kernel_get");
---
>   ops_timing_realloc(30,"calc_dt_kernel_get");
87c93
<   if (OPS_kernels[29].count == 0) {
---
>   if (OPS_kernels[30].count == 0) {
114a121
>   for (int d=0; d<1; d++) ((double *)arg2.data)[d+b*1] = ZERO_double;
119a127
>   for (int d=0; d<1; d++) ((double *)arg3.data)[d+b*1] = ZERO_double;
160a169
>       arg2h[d] = arg2h[d] + ((double *)arg2.data)[d+b*1];
166a176
>       arg3h[d] = arg3h[d] + ((double *)arg3.data)[d+b*1];
176,179c186,189
<   OPS_kernels[29].count++;
<   OPS_kernels[29].time += t2-t1;
<   OPS_kernels[29].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[29].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[30].count++;
>   OPS_kernels[30].time += t2-t1;
>   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg1);
Only in ../MPI_CUDA/: calc_dt_kernel.h
diff CUDA/calc_dt_kernel_min_cuda_kernel.cu ../MPI_CUDA/calc_dt_kernel_min_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
80c80
<   ops_timing_realloc(28,"calc_dt_kernel_min");
---
>   ops_timing_realloc(29,"calc_dt_kernel_min");
83c83
<   if (OPS_kernels[28].count == 0) {
---
>   if (OPS_kernels[29].count == 0) {
149,151c149,151
<   OPS_kernels[28].count++;
<   OPS_kernels[28].time += t2-t1;
<   OPS_kernels[28].transfer += ops_compute_transfer(dim, range, &arg0);
---
>   OPS_kernels[29].count++;
>   OPS_kernels[29].time += t2-t1;
>   OPS_kernels[29].transfer += ops_compute_transfer(dim, range, &arg0);
diff CUDA/calc_dt_kernel_print_cuda_kernel.cu ../MPI_CUDA/calc_dt_kernel_print_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
114c114
<   ops_timing_realloc(30,"calc_dt_kernel_print");
---
>   ops_timing_realloc(31,"calc_dt_kernel_print");
117c117
<   if (OPS_kernels[30].count == 0) {
---
>   if (OPS_kernels[31].count == 0) {
198,205c198,205
<   OPS_kernels[30].count++;
<   OPS_kernels[30].time += t2-t1;
<   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[30].transfer += ops_compute_transfer(dim, range, &arg5);
---
>   OPS_kernels[31].count++;
>   OPS_kernels[31].time += t2-t1;
>   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg5);
Only in ../MPI_CUDA/: calc_dt_ops.cpp
Only in ../MPI_CUDA/: clover.in
Only in ../MPI_CUDA/: clover.in_default
Only in ../MPI_CUDA/: clover_leaf.cpp
Only in ../MPI_CUDA/: cloverleaf_cuda
diff CUDA/clover_leaf_kernels.cu ../MPI_CUDA/clover_leaf_kernels.cu
2c2
< // auto-generated by op2.py on 2014-04-09 16:04
---
> // auto-generated by op2.py on 2014-03-18 10:09
5d4
< #include "user_types.h"
18,24c17,18
< __constant__ field_type field;
< __constant__ grid_type grid;
< __constant__ state_type *states;
< __constant__ int number_of_states;
< __constant__ int g_circ;
< __constant__ int g_point;
< __constant__ int g_rect;
---
> __constant__ int x_max;
> __constant__ int y_max;
26a21,38
> 
> #define FIELD_DENSITY0 0
> #define FIELD_DENSITY1 1
> #define FIELD_ENERGY0 2
> #define FIELD_ENERGY1 3
> #define FIELD_PRESSURE 4
> #define FIELD_VISCOSITY 5
> #define FIELD_SOUNDSPEED 6
> #define FIELD_XVEL0 7
> #define FIELD_XVEL1 8
> #define FIELD_YVEL0 9
> #define FIELD_YVEL1 10
> #define FIELD_VOL_FLUX_X 11
> #define FIELD_VOL_FLUX_Y 12
> #define FIELD_MASS_FLUX_X 13
> #define FIELD_MASS_FLUX_Y 14
> #define NUM_FIELDS 15
> 
53,76c65,66
<   if (!strcmp(name,"field")) {
<     cutilSafeCall(cudaMemcpyToSymbol(field, dat, dim*size));
<   }
<   else
<   if (!strcmp(name,"grid")) {
<     cutilSafeCall(cudaMemcpyToSymbol(grid, dat, dim*size));
<   }
<   else
<   if (!strcmp(name,"states")) {
<     char *temp; cutilSafeCall(cudaMalloc((void**)&temp,dim*size));
<     cutilSafeCall(cudaMemcpy(temp,dat,dim*size,cudaMemcpyHostToDevice));
<     cutilSafeCall(cudaMemcpyToSymbol(states, &temp, sizeof(char *)));
<   }
<   else
<   if (!strcmp(name,"number_of_states")) {
<     cutilSafeCall(cudaMemcpyToSymbol(number_of_states, dat, dim*size));
<   }
<   else
<   if (!strcmp(name,"g_circ")) {
<     cutilSafeCall(cudaMemcpyToSymbol(g_circ, dat, dim*size));
<   }
<   else
<   if (!strcmp(name,"g_point")) {
<     cutilSafeCall(cudaMemcpyToSymbol(g_point, dat, dim*size));
---
>   if (!strcmp(name,"x_max")) {
>     cutilSafeCall(cudaMemcpyToSymbol(x_max, dat, dim*size));
79,80c69,70
<   if (!strcmp(name,"g_rect")) {
<     cutilSafeCall(cudaMemcpyToSymbol(g_rect, dat, dim*size));
---
>   if (!strcmp(name,"y_max")) {
>     cutilSafeCall(cudaMemcpyToSymbol(y_max, dat, dim*size));
129,134d118
< #include "initialise_chunk_kernel_x_cuda_kernel.cu"
< #include "initialise_chunk_kernel_y_cuda_kernel.cu"
< #include "initialise_chunk_kernel_cellx_cuda_kernel.cu"
< #include "initialise_chunk_kernel_celly_cuda_kernel.cu"
< #include "initialise_chunk_kernel_volume_cuda_kernel.cu"
< #include "generate_chunk_kernel_cuda_kernel.cu"
Only in ../MPI_CUDA/: cloverleaf_kernels_cu.o
Only in ../MPI_CUDA/: clover_leaf_omp_kernels.cpp
Only in ../MPI_CUDA/: clover_leaf_ops.cpp
Only in ../MPI_CUDA/: cloverleaf_ops_vars.h
Only in ../MPI_CUDA/: clover.out
Only in ../MPI_CUDA/: data.h
Only in ../MPI_CUDA/: definitions.h
Only in ../MPI_CUDA/: field_summary.cpp
diff CUDA/field_summary_kernel_cuda_kernel.cu ../MPI_CUDA/field_summary_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
158c158
<   ops_timing_realloc(31,"field_summary_kernel");
---
>   ops_timing_realloc(32,"field_summary_kernel");
161c161
<   if (OPS_kernels[31].count == 0) {
---
>   if (OPS_kernels[32].count == 0) {
345,352c345,352
<   OPS_kernels[31].count++;
<   OPS_kernels[31].time += t2-t1;
<   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[31].transfer += ops_compute_transfer(dim, range, &arg5);
---
>   OPS_kernels[32].count++;
>   OPS_kernels[32].time += t2-t1;
>   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg5);
Only in ../MPI_CUDA/: field_summary_kernel.h
Only in ../MPI_CUDA/: field_summary_ops.cpp
Only in ../MPI_CUDA/: flux_calc.cpp
Only in ../MPI_CUDA/: flux_calc_kernel.h
diff CUDA/flux_calc_kernelx_cuda_kernel.cu ../MPI_CUDA/flux_calc_kernelx_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
95c95
<   ops_timing_realloc(32,"flux_calc_kernelx");
---
>   ops_timing_realloc(33,"flux_calc_kernelx");
98c98
<   if (OPS_kernels[32].count == 0) {
---
>   if (OPS_kernels[33].count == 0) {
160,165c160,165
<   OPS_kernels[32].count++;
<   OPS_kernels[32].time += t2-t1;
<   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[32].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[33].count++;
>   OPS_kernels[33].time += t2-t1;
>   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg3);
diff CUDA/flux_calc_kernely_cuda_kernel.cu ../MPI_CUDA/flux_calc_kernely_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
95c95
<   ops_timing_realloc(33,"flux_calc_kernely");
---
>   ops_timing_realloc(34,"flux_calc_kernely");
98c98
<   if (OPS_kernels[33].count == 0) {
---
>   if (OPS_kernels[34].count == 0) {
160,165c160,165
<   OPS_kernels[33].count++;
<   OPS_kernels[33].time += t2-t1;
<   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[33].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[34].count++;
>   OPS_kernels[34].time += t2-t1;
>   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg3);
Only in ../MPI_CUDA/: flux_calc_ops.cpp
diff CUDA/generate_chunk_kernel_cuda_kernel.cu ../MPI_CUDA/generate_chunk_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-17 15:34
26c26
< void generate_chunk_kernel( const double *vertexx, const double *vertexy,
---
> void generate_chunk_kernel( double *vertexx, double *vertexy,
29c29
<                      const double *cellx, const double *celly) {
---
>                      double *cellx, double *celly) {
34,37c34,37
<   energy0[OPS_ACC2(0,0)]= states[0].energy;
<   density0[OPS_ACC3(0,0)]= states[0].density;
<   xvel0[OPS_ACC4(0,0)]=states[0].xvel;
<   yvel0[OPS_ACC5(0,0)]=states[0].yvel;
---
>   energy0[OPS_ACC2(0,0)]= states[0]->energy;
>   density0[OPS_ACC3(0,0)]= states[0]->density;
>   xvel0[OPS_ACC4(0,0)]=states[0]->xvel;
>   yvel0[OPS_ACC5(0,0)]=states[0]->yvel;
41,42c41,42
<     x_cent=states[i].xmin;
<     y_cent=states[i].ymin;
---
>     x_cent=states[i]->xmin;
>     y_cent=states[i]->ymin;
44,59c44,59
<     if (states[i].geometry == g_rect) {
<       if(vertexx[OPS_ACC0(1,0)] >= states[i].xmin  && vertexx[OPS_ACC0(0,0)] < states[i].xmax) {
<         if(vertexy[OPS_ACC1(0,1)] >= states[i].ymin && vertexy[OPS_ACC1(0,0)] < states[i].ymax) {
< 
<           energy0[OPS_ACC2(0,0)] = states[i].energy;
<           density0[OPS_ACC3(0,0)] = states[i].density;
< 
<           xvel0[OPS_ACC4(0,0)] = states[i].xvel;
<           xvel0[OPS_ACC4(1,0)] = states[i].xvel;
<           xvel0[OPS_ACC4(0,1)] = states[i].xvel;
<           xvel0[OPS_ACC4(1,1)] = states[i].xvel;
< 
<           yvel0[OPS_ACC5(0,0)] = states[i].yvel;
<           yvel0[OPS_ACC5(1,0)] = states[i].yvel;
<           yvel0[OPS_ACC5(0,1)] = states[i].yvel;
<           yvel0[OPS_ACC5(1,1)] = states[i].yvel;
---
>     if (states[i]->geometry == g_rect) {
>       if(vertexx[OPS_ACC0(1,0)] >= states[i]->xmin  && vertexx[OPS_ACC0(0,0)] < states[i]->xmax) {
>         if(vertexy[OPS_ACC1(0,1)] >= states[i]->ymin && vertexy[OPS_ACC1(0,0)] < states[i]->ymax) {
> 
>           energy0[OPS_ACC2(0,0)] = states[i]->energy;
>           density0[OPS_ACC3(0,0)] = states[i]->density;
> 
>           xvel0[OPS_ACC4(0,0)] = states[i]->xvel;
>           xvel0[OPS_ACC4(1,0)] = states[i]->xvel;
>           xvel0[OPS_ACC4(0,1)] = states[i]->xvel;
>           xvel0[OPS_ACC4(1,1)] = states[i]->xvel;
> 
>           yvel0[OPS_ACC5(0,0)] = states[i]->yvel;
>           yvel0[OPS_ACC5(1,0)] = states[i]->yvel;
>           yvel0[OPS_ACC5(0,1)] = states[i]->yvel;
>           yvel0[OPS_ACC5(1,1)] = states[i]->yvel;
64c64
<     else if(states[i].geometry == g_circ) {
---
>     else if(states[i]->geometry == g_circ) {
67,79c67,79
<       if(radius <= states[i].radius) {
<         energy0[OPS_ACC2(0,0)] = states[i].energy;
<         density0[OPS_ACC3(0,0)] = states[i].density;
< 
<         xvel0[OPS_ACC4(0,0)] = states[i].xvel;
<         xvel0[OPS_ACC4(1,0)] = states[i].xvel;
<         xvel0[OPS_ACC4(0,1)] = states[i].xvel;
<         xvel0[OPS_ACC4(1,1)] = states[i].xvel;
< 
<         yvel0[OPS_ACC5(0,0)] = states[i].yvel;
<         yvel0[OPS_ACC5(1,0)] = states[i].yvel;
<         yvel0[OPS_ACC5(0,1)] = states[i].yvel;
<         yvel0[OPS_ACC5(1,1)] = states[i].yvel;
---
>       if(radius <= states[i]->radius) {
>         energy0[OPS_ACC2(0,0)] = states[i]->energy;
>         density0[OPS_ACC3(0,0)] = states[i]->density;
> 
>         xvel0[OPS_ACC4(0,0)] = states[i]->xvel;
>         xvel0[OPS_ACC4(1,0)] = states[i]->xvel;
>         xvel0[OPS_ACC4(0,1)] = states[i]->xvel;
>         xvel0[OPS_ACC4(1,1)] = states[i]->xvel;
> 
>         yvel0[OPS_ACC5(0,0)] = states[i]->yvel;
>         yvel0[OPS_ACC5(1,0)] = states[i]->yvel;
>         yvel0[OPS_ACC5(0,1)] = states[i]->yvel;
>         yvel0[OPS_ACC5(1,1)] = states[i]->yvel;
82c82
<     else if(states[i].geometry == g_point) {
---
>     else if(states[i]->geometry == g_point) {
84,85c84,85
<         energy0[OPS_ACC2(0,0)] = states[i].energy;
<         density0[OPS_ACC3(0,0)] = states[i].density;
---
>         energy0[OPS_ACC2(0,0)] = states[i]->energy;
>         density0[OPS_ACC3(0,0)] = states[i]->density;
87,95c87,95
<         xvel0[OPS_ACC4(0,0)] = states[i].xvel;
<         xvel0[OPS_ACC4(1,0)] = states[i].xvel;
<         xvel0[OPS_ACC4(0,1)] = states[i].xvel;
<         xvel0[OPS_ACC4(1,1)] = states[i].xvel;
< 
<         yvel0[OPS_ACC5(0,0)] = states[i].yvel;
<         yvel0[OPS_ACC5(1,0)] = states[i].yvel;
<         yvel0[OPS_ACC5(0,1)] = states[i].yvel;
<         yvel0[OPS_ACC5(1,1)] = states[i].yvel;
---
>         xvel0[OPS_ACC4(0,0)] = states[i]->xvel;
>         xvel0[OPS_ACC4(1,0)] = states[i]->xvel;
>         xvel0[OPS_ACC4(0,1)] = states[i]->xvel;
>         xvel0[OPS_ACC4(1,1)] = states[i]->xvel;
> 
>         yvel0[OPS_ACC5(0,0)] = states[i]->yvel;
>         yvel0[OPS_ACC5(1,0)] = states[i]->yvel;
>         yvel0[OPS_ACC5(0,1)] = states[i]->yvel;
>         yvel0[OPS_ACC5(1,1)] = states[i]->yvel;
154,159c154,163
<   int start_add[2];
<   int end_add[2];
<   for ( int n=0; n<2; n++ ){
<     start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
<     if (start_add[n] >= range[2*n]) {
<       start_add[n] = 0;
---
>   int ndim = sb->ndim;
>   int start_add[ndim*8];
> 
>   int s[ndim];
>   int e[ndim];
> 
>   for ( int n=0; n<ndim; n++ ){
>     s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
>     if (s[n] >= range[2*n]) {
>       s[n] = 0;
162c166
<       start_add[n] = range[2*n] - start_add[n];
---
>       s[n] = range[2*n] - s[n];
164,165c168,169
<     if (end_add[n] >= range[2*n+1]) {
<       end_add[n] = range[2*n+1] - sb->istart[n];
---
>     if (e[n] >= range[2*n+1]) {
>       e[n] = range[2*n+1] - sb->istart[n];
168c172,178
<       end_add[n] = sb->sizes[n];
---
>       e[n] = sb->sizes[n];
>     }
>   }
> 
>   for ( int i=0; i<8; i++ ){
>     for ( int n=0; n<ndim; n++ ){
>       start_add[i*ndim+n] = s[n];
173,174c183,184
<   int x_size = end_add[0]-start_add[0];
<   int y_size = end_add[1]-start_add[1];
---
>   int x_size = e[0]-s[0];
>   int y_size = e[1]-s[1];
188c198
<   ops_timing_realloc(40,"generate_chunk_kernel");
---
>   ops_timing_realloc(81,"generate_chunk_kernel");
191c201
<   if (OPS_kernels[40].count == 0) {
---
>   if (OPS_kernels[81].count == 0) {
222c232
<   (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
---
>   (start_add[ndim+0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
224c234
<   (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
---
>   (start_add[ndim+1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
229c239
<   (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
---
>   (start_add[ndim+0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
231c241
<   (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
---
>   (start_add[ndim+1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
236c246
<   (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
---
>   (start_add[ndim+0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
238c248
<   (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
---
>   (start_add[ndim+1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
243c253
<   (start_add[0] * args[3].stencil->stride[0] - args[3].dat->offset[0]);
---
>   (start_add[ndim+0] * args[3].stencil->stride[0] - args[3].dat->offset[0]);
245c255
<   (start_add[1] * args[3].stencil->stride[1] - args[3].dat->offset[1]);
---
>   (start_add[ndim+1] * args[3].stencil->stride[1] - args[3].dat->offset[1]);
250c260
<   (start_add[0] * args[4].stencil->stride[0] - args[4].dat->offset[0]);
---
>   (start_add[ndim+0] * args[4].stencil->stride[0] - args[4].dat->offset[0]);
252c262
<   (start_add[1] * args[4].stencil->stride[1] - args[4].dat->offset[1]);
---
>   (start_add[ndim+1] * args[4].stencil->stride[1] - args[4].dat->offset[1]);
257c267
<   (start_add[0] * args[5].stencil->stride[0] - args[5].dat->offset[0]);
---
>   (start_add[ndim+0] * args[5].stencil->stride[0] - args[5].dat->offset[0]);
259c269
<   (start_add[1] * args[5].stencil->stride[1] - args[5].dat->offset[1]);
---
>   (start_add[ndim+1] * args[5].stencil->stride[1] - args[5].dat->offset[1]);
264c274
<   (start_add[0] * args[6].stencil->stride[0] - args[6].dat->offset[0]);
---
>   (start_add[ndim+0] * args[6].stencil->stride[0] - args[6].dat->offset[0]);
266c276
<   (start_add[1] * args[6].stencil->stride[1] - args[6].dat->offset[1]);
---
>   (start_add[ndim+1] * args[6].stencil->stride[1] - args[6].dat->offset[1]);
271c281
<   (start_add[0] * args[7].stencil->stride[0] - args[7].dat->offset[0]);
---
>   (start_add[ndim+0] * args[7].stencil->stride[0] - args[7].dat->offset[0]);
273c283
<   (start_add[1] * args[7].stencil->stride[1] - args[7].dat->offset[1]);
---
>   (start_add[ndim+1] * args[7].stencil->stride[1] - args[7].dat->offset[1]);
291,300c301,310
<   OPS_kernels[40].count++;
<   OPS_kernels[40].time += t2-t1;
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg7);
---
>   OPS_kernels[81].count++;
>   OPS_kernels[81].time += t2-t1;
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[81].transfer += ops_compute_transfer(dim, range, &arg7);
Only in ../MPI_CUDA/: generate_chunk_kernel.h
Only in ../MPI_CUDA/: generate_chunk_kernel_omp_kernel.cpp
Only in ../MPI_CUDA/: generate.cpp
Only in ../MPI_CUDA/: generate_ops.cpp
Only in ../MPI_CUDA/: .gitignore
Only in ../MPI_CUDA/: ideal_gas.cpp
diff CUDA/ideal_gas_kernel_cuda_kernel.cu ../MPI_CUDA/ideal_gas_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
100c100
<   ops_timing_realloc(3,"ideal_gas_kernel");
---
>   ops_timing_realloc(4,"ideal_gas_kernel");
103c103
<   if (OPS_kernels[3].count == 0) {
---
>   if (OPS_kernels[4].count == 0) {
165,170c165,170
<   OPS_kernels[3].count++;
<   OPS_kernels[3].time += t2-t1;
<   OPS_kernels[3].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[3].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[3].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[3].transfer += ops_compute_transfer(dim, range, &arg3);
---
>   OPS_kernels[4].count++;
>   OPS_kernels[4].time += t2-t1;
>   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg3);
Only in ../MPI_CUDA/: ideal_gas_kernel.h
Only in ../MPI_CUDA/: ideal_gas_ops.cpp
Only in ../MPI_CUDA/: initialise_chunk.cpp
diff CUDA/initialise_chunk_kernel_cellx_cuda_kernel.cu ../MPI_CUDA/initialise_chunk_kernel_cellx_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-17 15:34
16c16
< void initialise_chunk_kernel_cellx(const double *vertexx, double* cellx, double *celldx) {
---
> void initialise_chunk_kernel_cellx(double *vertexx, double* cellx, double *celldx) {
18,21c18,21
<   int x_min=field.x_min-2;
<   int x_max=field.x_max-2;
<   int y_min=field.y_min-2;
<   int y_max=field.y_max-2;
---
>   int x_min=field->x_min-2;
>   int x_max=field->x_max-2;
>   int y_min=field->y_min-2;
>   int y_max=field->y_max-2;
25,26c25,26
<   d_x = (grid.xmax - grid.xmin)/(double)grid.x_cells;
<   d_y = (grid.ymax - grid.ymin)/(double)grid.y_cells;
---
>   d_x = (grid->xmax - grid->xmin)/(double)grid->x_cells;
>   d_y = (grid->ymax - grid->ymin)/(double)grid->y_cells;
28,29c28,29
<   min_x=grid.xmin+d_x;
<   min_y=grid.ymin+d_y;
---
>   min_x=grid->xmin+d_x;
>   min_y=grid->ymin+d_y;
72,77c72,81
<   int start_add[2];
<   int end_add[2];
<   for ( int n=0; n<2; n++ ){
<     start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
<     if (start_add[n] >= range[2*n]) {
<       start_add[n] = 0;
---
>   int ndim = sb->ndim;
>   int start_add[ndim*3];
> 
>   int s[ndim];
>   int e[ndim];
> 
>   for ( int n=0; n<ndim; n++ ){
>     s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
>     if (s[n] >= range[2*n]) {
>       s[n] = 0;
80c84
<       start_add[n] = range[2*n] - start_add[n];
---
>       s[n] = range[2*n] - s[n];
82,83c86,87
<     if (end_add[n] >= range[2*n+1]) {
<       end_add[n] = range[2*n+1] - sb->istart[n];
---
>     if (e[n] >= range[2*n+1]) {
>       e[n] = range[2*n+1] - sb->istart[n];
86c90,96
<       end_add[n] = sb->sizes[n];
---
>       e[n] = sb->sizes[n];
>     }
>   }
> 
>   for ( int i=0; i<3; i++ ){
>     for ( int n=0; n<ndim; n++ ){
>       start_add[i*ndim+n] = s[n];
91,92c101,102
<   int x_size = end_add[0]-start_add[0];
<   int y_size = end_add[1]-start_add[1];
---
>   int x_size = e[0]-s[0];
>   int y_size = e[1]-s[1];
101c111
<   ops_timing_realloc(37,"initialise_chunk_kernel_cellx");
---
>   ops_timing_realloc(78,"initialise_chunk_kernel_cellx");
104c114
<   if (OPS_kernels[37].count == 0) {
---
>   if (OPS_kernels[78].count == 0) {
125c135
<   (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
---
>   (start_add[ndim+0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
127c137
<   (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
---
>   (start_add[ndim+1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
132c142
<   (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
---
>   (start_add[ndim+0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
134c144
<   (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
---
>   (start_add[ndim+1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
139c149
<   (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
---
>   (start_add[ndim+0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
141c151
<   (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
---
>   (start_add[ndim+1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
157,161c167,171
<   OPS_kernels[37].count++;
<   OPS_kernels[37].time += t2-t1;
<   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg2);
---
>   OPS_kernels[78].count++;
>   OPS_kernels[78].time += t2-t1;
>   OPS_kernels[78].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[78].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[78].transfer += ops_compute_transfer(dim, range, &arg2);
Only in ../MPI_CUDA/: initialise_chunk_kernel_cellx_omp_kernel.cpp
diff CUDA/initialise_chunk_kernel_celly_cuda_kernel.cu ../MPI_CUDA/initialise_chunk_kernel_celly_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-17 15:34
16c16
< void initialise_chunk_kernel_celly(const double *vertexy, double *celly, double *celldy) {
---
> void initialise_chunk_kernel_celly(double *vertexy, double *celly, double *celldy) {
18,21c18,21
<   int x_min=field.x_min-2;
<   int x_max=field.x_max-2;
<   int y_min=field.y_min-2;
<   int y_max=field.y_max-2;
---
>   int x_min=field->x_min-2;
>   int x_max=field->x_max-2;
>   int y_min=field->y_min-2;
>   int y_max=field->y_max-2;
25,26c25,26
<   d_x = (grid.xmax - grid.xmin)/(double)grid.x_cells;
<   d_y = (grid.ymax - grid.ymin)/(double)grid.y_cells;
---
>   d_x = (grid->xmax - grid->xmin)/(double)grid->x_cells;
>   d_y = (grid->ymax - grid->ymin)/(double)grid->y_cells;
28,29c28,29
<   min_x=grid.xmin+d_x;
<   min_y=grid.ymin+d_y;
---
>   min_x=grid->xmin+d_x;
>   min_y=grid->ymin+d_y;
73,78c73,82
<   int start_add[2];
<   int end_add[2];
<   for ( int n=0; n<2; n++ ){
<     start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
<     if (start_add[n] >= range[2*n]) {
<       start_add[n] = 0;
---
>   int ndim = sb->ndim;
>   int start_add[ndim*3];
> 
>   int s[ndim];
>   int e[ndim];
> 
>   for ( int n=0; n<ndim; n++ ){
>     s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
>     if (s[n] >= range[2*n]) {
>       s[n] = 0;
81c85
<       start_add[n] = range[2*n] - start_add[n];
---
>       s[n] = range[2*n] - s[n];
83,84c87,88
<     if (end_add[n] >= range[2*n+1]) {
<       end_add[n] = range[2*n+1] - sb->istart[n];
---
>     if (e[n] >= range[2*n+1]) {
>       e[n] = range[2*n+1] - sb->istart[n];
87c91,97
<       end_add[n] = sb->sizes[n];
---
>       e[n] = sb->sizes[n];
>     }
>   }
> 
>   for ( int i=0; i<3; i++ ){
>     for ( int n=0; n<ndim; n++ ){
>       start_add[i*ndim+n] = s[n];
92,93c102,103
<   int x_size = end_add[0]-start_add[0];
<   int y_size = end_add[1]-start_add[1];
---
>   int x_size = e[0]-s[0];
>   int y_size = e[1]-s[1];
102c112
<   ops_timing_realloc(38,"initialise_chunk_kernel_celly");
---
>   ops_timing_realloc(79,"initialise_chunk_kernel_celly");
105c115
<   if (OPS_kernels[38].count == 0) {
---
>   if (OPS_kernels[79].count == 0) {
126c136
<   (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
---
>   (start_add[ndim+0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
128c138
<   (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
---
>   (start_add[ndim+1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
133c143
<   (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
---
>   (start_add[ndim+0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
135c145
<   (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
---
>   (start_add[ndim+1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
140c150
<   (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
---
>   (start_add[ndim+0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
142c152
<   (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
---
>   (start_add[ndim+1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
158,162c168,172
<   OPS_kernels[38].count++;
<   OPS_kernels[38].time += t2-t1;
<   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg2);
---
>   OPS_kernels[79].count++;
>   OPS_kernels[79].time += t2-t1;
>   OPS_kernels[79].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[79].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[79].transfer += ops_compute_transfer(dim, range, &arg2);
Only in ../MPI_CUDA/: initialise_chunk_kernel_celly_omp_kernel.cpp
Only in ../MPI_CUDA/: initialise_chunk_kernel.h
diff CUDA/initialise_chunk_kernel_volume_cuda_kernel.cu ../MPI_CUDA/initialise_chunk_kernel_volume_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-17 15:34
20,21c20,21
< void initialise_chunk_kernel_volume(double *volume, const double *celldy, double *xarea,
<                                          const double *celldx, double *yarea) {
---
> void initialise_chunk_kernel_volume(double *volume, double *celldy, double *xarea,
>                                          double *celldx, double *yarea) {
25,26c25,26
<   d_x = (grid.xmax - grid.xmin)/(double)grid.x_cells;
<   d_y = (grid.ymax - grid.ymin)/(double)grid.y_cells;
---
>   d_x = (grid->xmax - grid->xmin)/(double)grid->x_cells;
>   d_y = (grid->ymax - grid->ymin)/(double)grid->y_cells;
77,82c77,86
<   int start_add[2];
<   int end_add[2];
<   for ( int n=0; n<2; n++ ){
<     start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
<     if (start_add[n] >= range[2*n]) {
<       start_add[n] = 0;
---
>   int ndim = sb->ndim;
>   int start_add[ndim*5];
> 
>   int s[ndim];
>   int e[ndim];
> 
>   for ( int n=0; n<ndim; n++ ){
>     s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
>     if (s[n] >= range[2*n]) {
>       s[n] = 0;
85c89
<       start_add[n] = range[2*n] - start_add[n];
---
>       s[n] = range[2*n] - s[n];
87,88c91,92
<     if (end_add[n] >= range[2*n+1]) {
<       end_add[n] = range[2*n+1] - sb->istart[n];
---
>     if (e[n] >= range[2*n+1]) {
>       e[n] = range[2*n+1] - sb->istart[n];
91c95,101
<       end_add[n] = sb->sizes[n];
---
>       e[n] = sb->sizes[n];
>     }
>   }
> 
>   for ( int i=0; i<5; i++ ){
>     for ( int n=0; n<ndim; n++ ){
>       start_add[i*ndim+n] = s[n];
96,97c106,107
<   int x_size = end_add[0]-start_add[0];
<   int y_size = end_add[1]-start_add[1];
---
>   int x_size = e[0]-s[0];
>   int y_size = e[1]-s[1];
108c118
<   ops_timing_realloc(39,"initialise_chunk_kernel_volume");
---
>   ops_timing_realloc(80,"initialise_chunk_kernel_volume");
111c121
<   if (OPS_kernels[39].count == 0) {
---
>   if (OPS_kernels[80].count == 0) {
136c146
<   (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
---
>   (start_add[ndim+0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
138c148
<   (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
---
>   (start_add[ndim+1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
143c153
<   (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
---
>   (start_add[ndim+0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
145c155
<   (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
---
>   (start_add[ndim+1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
150c160
<   (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
---
>   (start_add[ndim+0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
152c162
<   (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
---
>   (start_add[ndim+1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
157c167
<   (start_add[0] * args[3].stencil->stride[0] - args[3].dat->offset[0]);
---
>   (start_add[ndim+0] * args[3].stencil->stride[0] - args[3].dat->offset[0]);
159c169
<   (start_add[1] * args[3].stencil->stride[1] - args[3].dat->offset[1]);
---
>   (start_add[ndim+1] * args[3].stencil->stride[1] - args[3].dat->offset[1]);
164c174
<   (start_add[0] * args[4].stencil->stride[0] - args[4].dat->offset[0]);
---
>   (start_add[ndim+0] * args[4].stencil->stride[0] - args[4].dat->offset[0]);
166c176
<   (start_add[1] * args[4].stencil->stride[1] - args[4].dat->offset[1]);
---
>   (start_add[ndim+1] * args[4].stencil->stride[1] - args[4].dat->offset[1]);
183,189c193,199
<   OPS_kernels[39].count++;
<   OPS_kernels[39].time += t2-t1;
<   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg4);
---
>   OPS_kernels[80].count++;
>   OPS_kernels[80].time += t2-t1;
>   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg4);
Only in ../MPI_CUDA/: initialise_chunk_kernel_volume_omp_kernel.cpp
diff CUDA/initialise_chunk_kernel_x_cuda_kernel.cu ../MPI_CUDA/initialise_chunk_kernel_x_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-17 15:34
16c16
< void initialise_chunk_kernel_x(double *vertexx, const int *xx, double *vertexdx) {
---
> void initialise_chunk_kernel_x(double *vertexx, int *xx, double *vertexdx) {
18,21c18,21
<   int x_min=field.x_min-2;
<   int x_max=field.x_max-2;
<   int y_min=field.y_min-2;
<   int y_max=field.y_max-2;
---
>   int x_min=field->x_min-2;
>   int x_max=field->x_max-2;
>   int y_min=field->y_min-2;
>   int y_max=field->y_max-2;
25,26c25,26
<   d_x = (grid.xmax - grid.xmin)/(double)grid.x_cells;
<   d_y = (grid.ymax - grid.ymin)/(double)grid.y_cells;
---
>   d_x = (grid->xmax - grid->xmin)/(double)grid->x_cells;
>   d_y = (grid->ymax - grid->ymin)/(double)grid->y_cells;
28,29c28,29
<   min_x=grid.xmin+d_x*field.left;
<   min_y=grid.ymin+d_y*field.bottom;
---
>   min_x=grid->xmin+d_x*field->left;
>   min_y=grid->ymin+d_y*field->bottom;
71,76c71,80
<   int start_add[2];
<   int end_add[2];
<   for ( int n=0; n<2; n++ ){
<     start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
<     if (start_add[n] >= range[2*n]) {
<       start_add[n] = 0;
---
>   int ndim = sb->ndim;
>   int start_add[ndim*3];
> 
>   int s[ndim];
>   int e[ndim];
> 
>   for ( int n=0; n<ndim; n++ ){
>     s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
>     if (s[n] >= range[2*n]) {
>       s[n] = 0;
79c83
<       start_add[n] = range[2*n] - start_add[n];
---
>       s[n] = range[2*n] - s[n];
81,82c85,86
<     if (end_add[n] >= range[2*n+1]) {
<       end_add[n] = range[2*n+1] - sb->istart[n];
---
>     if (e[n] >= range[2*n+1]) {
>       e[n] = range[2*n+1] - sb->istart[n];
85c89,95
<       end_add[n] = sb->sizes[n];
---
>       e[n] = sb->sizes[n];
>     }
>   }
> 
>   for ( int i=0; i<3; i++ ){
>     for ( int n=0; n<ndim; n++ ){
>       start_add[i*ndim+n] = s[n];
90,91c100,101
<   int x_size = end_add[0]-start_add[0];
<   int y_size = end_add[1]-start_add[1];
---
>   int x_size = e[0]-s[0];
>   int y_size = e[1]-s[1];
100c110
<   ops_timing_realloc(35,"initialise_chunk_kernel_x");
---
>   ops_timing_realloc(76,"initialise_chunk_kernel_x");
103c113
<   if (OPS_kernels[35].count == 0) {
---
>   if (OPS_kernels[76].count == 0) {
124c134
<   (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
---
>   (start_add[ndim+0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
126c136
<   (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
---
>   (start_add[ndim+1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
131c141
<   (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
---
>   (start_add[ndim+0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
133c143
<   (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
---
>   (start_add[ndim+1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
138c148
<   (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
---
>   (start_add[ndim+0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
140c150
<   (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
---
>   (start_add[ndim+1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
156,160c166,170
<   OPS_kernels[35].count++;
<   OPS_kernels[35].time += t2-t1;
<   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg2);
---
>   OPS_kernels[76].count++;
>   OPS_kernels[76].time += t2-t1;
>   OPS_kernels[76].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[76].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[76].transfer += ops_compute_transfer(dim, range, &arg2);
Only in ../MPI_CUDA/: initialise_chunk_kernel_x_omp_kernel.cpp
diff CUDA/initialise_chunk_kernel_y_cuda_kernel.cu ../MPI_CUDA/initialise_chunk_kernel_y_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-17 15:34
16c16
< void initialise_chunk_kernel_y(double *vertexy, const int *yy, double *vertexdy) {
---
> void initialise_chunk_kernel_y(double *vertexy, int *yy, double *vertexdy) {
18,21c18,21
<   int x_min=field.x_min-2;
<   int x_max=field.x_max-2;
<   int y_min=field.y_min-2;
<   int y_max=field.y_max-2;
---
>   int x_min=field->x_min-2;
>   int x_max=field->x_max-2;
>   int y_min=field->y_min-2;
>   int y_max=field->y_max-2;
25,26c25,26
<   d_x = (grid.xmax - grid.xmin)/(double)grid.x_cells;
<   d_y = (grid.ymax - grid.ymin)/(double)grid.y_cells;
---
>   d_x = (grid->xmax - grid->xmin)/(double)grid->x_cells;
>   d_y = (grid->ymax - grid->ymin)/(double)grid->y_cells;
28,29c28,29
<   min_x=grid.xmin+d_x*field.left;
<   min_y=grid.ymin+d_y*field.bottom;
---
>   min_x=grid->xmin+d_x*field->left;
>   min_y=grid->ymin+d_y*field->bottom;
71,76c71,80
<   int start_add[2];
<   int end_add[2];
<   for ( int n=0; n<2; n++ ){
<     start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
<     if (start_add[n] >= range[2*n]) {
<       start_add[n] = 0;
---
>   int ndim = sb->ndim;
>   int start_add[ndim*3];
> 
>   int s[ndim];
>   int e[ndim];
> 
>   for ( int n=0; n<ndim; n++ ){
>     s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
>     if (s[n] >= range[2*n]) {
>       s[n] = 0;
79c83
<       start_add[n] = range[2*n] - start_add[n];
---
>       s[n] = range[2*n] - s[n];
81,82c85,86
<     if (end_add[n] >= range[2*n+1]) {
<       end_add[n] = range[2*n+1] - sb->istart[n];
---
>     if (e[n] >= range[2*n+1]) {
>       e[n] = range[2*n+1] - sb->istart[n];
85c89,95
<       end_add[n] = sb->sizes[n];
---
>       e[n] = sb->sizes[n];
>     }
>   }
> 
>   for ( int i=0; i<3; i++ ){
>     for ( int n=0; n<ndim; n++ ){
>       start_add[i*ndim+n] = s[n];
90,91c100,101
<   int x_size = end_add[0]-start_add[0];
<   int y_size = end_add[1]-start_add[1];
---
>   int x_size = e[0]-s[0];
>   int y_size = e[1]-s[1];
100c110
<   ops_timing_realloc(36,"initialise_chunk_kernel_y");
---
>   ops_timing_realloc(77,"initialise_chunk_kernel_y");
103c113
<   if (OPS_kernels[36].count == 0) {
---
>   if (OPS_kernels[77].count == 0) {
124c134
<   (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
---
>   (start_add[ndim+0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
126c136
<   (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
---
>   (start_add[ndim+1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
131c141
<   (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
---
>   (start_add[ndim+0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
133c143
<   (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
---
>   (start_add[ndim+1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
138c148
<   (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
---
>   (start_add[ndim+0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
140c150
<   (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
---
>   (start_add[ndim+1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
156,160c166,170
<   OPS_kernels[36].count++;
<   OPS_kernels[36].time += t2-t1;
<   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg2);
---
>   OPS_kernels[77].count++;
>   OPS_kernels[77].time += t2-t1;
>   OPS_kernels[77].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[77].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[77].transfer += ops_compute_transfer(dim, range, &arg2);
Only in ../MPI_CUDA/: initialise_chunk_kernel_y_omp_kernel.cpp
Only in ../MPI_CUDA/: initialise_chunk_ops.cpp
Only in ../MPI_CUDA/: initialise.cpp
Only in ../MPI_CUDA/: Makefile
Only in ../MPI_CUDA/: PdV.cpp
Only in ../MPI_CUDA/: PdV_kernel.h
diff CUDA/PdV_kernel_nopredict_cuda_kernel.cu ../MPI_CUDA/PdV_kernel_nopredict_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
190c190
<   ops_timing_realloc(5,"PdV_kernel_nopredict");
---
>   ops_timing_realloc(6,"PdV_kernel_nopredict");
193c193
<   if (OPS_kernels[5].count == 0) {
---
>   if (OPS_kernels[6].count == 0) {
350,365c350,365
<   OPS_kernels[5].count++;
<   OPS_kernels[5].time += t2-t1;
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg7);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg8);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg9);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg10);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg11);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg12);
<   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg13);
---
>   OPS_kernels[6].count++;
>   OPS_kernels[6].time += t2-t1;
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg7);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg8);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg9);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg10);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg11);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg12);
>   OPS_kernels[6].transfer += ops_compute_transfer(dim, range, &arg13);
diff CUDA/PdV_kernel_predict_cuda_kernel.cu ../MPI_CUDA/PdV_kernel_predict_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
178c178
<   ops_timing_realloc(4,"PdV_kernel_predict");
---
>   ops_timing_realloc(5,"PdV_kernel_predict");
181c181
<   if (OPS_kernels[4].count == 0) {
---
>   if (OPS_kernels[5].count == 0) {
319,332c319,332
<   OPS_kernels[4].count++;
<   OPS_kernels[4].time += t2-t1;
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg6);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg7);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg8);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg9);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg10);
<   OPS_kernels[4].transfer += ops_compute_transfer(dim, range, &arg11);
---
>   OPS_kernels[5].count++;
>   OPS_kernels[5].time += t2-t1;
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg6);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg7);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg8);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg9);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg10);
>   OPS_kernels[5].transfer += ops_compute_transfer(dim, range, &arg11);
Only in ../MPI_CUDA/: PdV_ops.cpp
Only in ../MPI_CUDA/: read_input.cpp
Only in ../MPI_CUDA/: reset_field.cpp
diff CUDA/reset_field_kernel1_cuda_kernel.cu ../MPI_CUDA/reset_field_kernel1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
diff CUDA/reset_field_kernel2_cuda_kernel.cu ../MPI_CUDA/reset_field_kernel2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
Only in ../MPI_CUDA/: reset_field_kernel.h
Only in ../MPI_CUDA/: reset_field_ops.cpp
Only in ../MPI_CUDA/: revert.cpp
diff CUDA/revert_kernel_cuda_kernel.cu ../MPI_CUDA/revert_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
Only in ../MPI_CUDA/: revert_kernel.h
Only in ../MPI_CUDA/: revert_kernels.cu
Only in ../MPI_CUDA/: revert_ops.cpp
Only in ../MPI_CUDA/: start.cpp
Only in ../MPI_CUDA/: time_step.cpp
Only in ../MPI_CUDA/: update_halo.cpp
diff CUDA/update_halo_kernel1_b1_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_b1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
123c123
<   ops_timing_realloc(42,"update_halo_kernel1_b1");
---
>   ops_timing_realloc(37,"update_halo_kernel1_b1");
126c126
<   if (OPS_kernels[42].count == 0) {
---
>   if (OPS_kernels[37].count == 0) {
144c144
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
151,152c151,152
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
228,236c228,236
<   OPS_kernels[42].count++;
<   OPS_kernels[42].time += t2-t1;
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[37].count++;
>   OPS_kernels[37].time += t2-t1;
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[37].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_b2_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_b2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(41,"update_halo_kernel1_b2");
---
>   ops_timing_realloc(36,"update_halo_kernel1_b2");
125c125
<   if (OPS_kernels[41].count == 0) {
---
>   if (OPS_kernels[36].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[41].count++;
<   OPS_kernels[41].time += t2-t1;
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[36].count++;
>   OPS_kernels[36].time += t2-t1;
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[36].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_l1_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_l1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(46,"update_halo_kernel1_l1");
---
>   ops_timing_realloc(41,"update_halo_kernel1_l1");
125c125
<   if (OPS_kernels[46].count == 0) {
---
>   if (OPS_kernels[41].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[46].count++;
<   OPS_kernels[46].time += t2-t1;
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[41].count++;
>   OPS_kernels[41].time += t2-t1;
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_l2_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_l2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(45,"update_halo_kernel1_l2");
---
>   ops_timing_realloc(40,"update_halo_kernel1_l2");
125c125
<   if (OPS_kernels[45].count == 0) {
---
>   if (OPS_kernels[40].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[45].count++;
<   OPS_kernels[45].time += t2-t1;
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[40].count++;
>   OPS_kernels[40].time += t2-t1;
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[40].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_r1_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_r1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(48,"update_halo_kernel1_r1");
---
>   ops_timing_realloc(43,"update_halo_kernel1_r1");
125c125
<   if (OPS_kernels[48].count == 0) {
---
>   if (OPS_kernels[43].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[48].count++;
<   OPS_kernels[48].time += t2-t1;
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[43].count++;
>   OPS_kernels[43].time += t2-t1;
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_r2_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_r2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(47,"update_halo_kernel1_r2");
---
>   ops_timing_realloc(42,"update_halo_kernel1_r2");
125c125
<   if (OPS_kernels[47].count == 0) {
---
>   if (OPS_kernels[42].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[47].count++;
<   OPS_kernels[47].time += t2-t1;
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[42].count++;
>   OPS_kernels[42].time += t2-t1;
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[42].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_t1_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_t1_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(44,"update_halo_kernel1_t1");
---
>   ops_timing_realloc(39,"update_halo_kernel1_t1");
125c125
<   if (OPS_kernels[44].count == 0) {
---
>   if (OPS_kernels[39].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[44].count++;
<   OPS_kernels[44].time += t2-t1;
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[39].count++;
>   OPS_kernels[39].time += t2-t1;
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[39].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel1_t2_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel1_t2_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
122c122
<   ops_timing_realloc(43,"update_halo_kernel1_t2");
---
>   ops_timing_realloc(38,"update_halo_kernel1_t2");
125c125
<   if (OPS_kernels[43].count == 0) {
---
>   if (OPS_kernels[38].count == 0) {
143c143
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
150,151c150,151
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg7.data)[d] = arg7h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg7.data)[d] = arg7h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
227,235c227,235
<   OPS_kernels[43].count++;
<   OPS_kernels[43].time += t2-t1;
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[43].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[38].count++;
>   OPS_kernels[38].time += t2-t1;
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[38].transfer += ops_compute_transfer(dim, range, &arg6);
diff CUDA/update_halo_kernel2_xvel_minus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_minus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(54,"update_halo_kernel2_xvel_minus_2_a");
---
>   ops_timing_realloc(49,"update_halo_kernel2_xvel_minus_2_a");
85c85
<   if (OPS_kernels[54].count == 0) {
---
>   if (OPS_kernels[49].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[54].count++;
<   OPS_kernels[54].time += t2-t1;
<   OPS_kernels[54].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[54].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[49].count++;
>   OPS_kernels[49].time += t2-t1;
>   OPS_kernels[49].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[49].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_minus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_minus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(56,"update_halo_kernel2_xvel_minus_2_b");
---
>   ops_timing_realloc(51,"update_halo_kernel2_xvel_minus_2_b");
85c85
<   if (OPS_kernels[56].count == 0) {
---
>   if (OPS_kernels[51].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[56].count++;
<   OPS_kernels[56].time += t2-t1;
<   OPS_kernels[56].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[56].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[51].count++;
>   OPS_kernels[51].time += t2-t1;
>   OPS_kernels[51].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[51].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_minus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_minus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(53,"update_halo_kernel2_xvel_minus_4_a");
---
>   ops_timing_realloc(48,"update_halo_kernel2_xvel_minus_4_a");
85c85
<   if (OPS_kernels[53].count == 0) {
---
>   if (OPS_kernels[48].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[53].count++;
<   OPS_kernels[53].time += t2-t1;
<   OPS_kernels[53].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[53].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[48].count++;
>   OPS_kernels[48].time += t2-t1;
>   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[48].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_minus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_minus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(55,"update_halo_kernel2_xvel_minus_4_b");
---
>   ops_timing_realloc(50,"update_halo_kernel2_xvel_minus_4_b");
85c85
<   if (OPS_kernels[55].count == 0) {
---
>   if (OPS_kernels[50].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[55].count++;
<   OPS_kernels[55].time += t2-t1;
<   OPS_kernels[55].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[55].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[50].count++;
>   OPS_kernels[50].time += t2-t1;
>   OPS_kernels[50].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[50].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_plus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_plus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(50,"update_halo_kernel2_xvel_plus_2_a");
---
>   ops_timing_realloc(45,"update_halo_kernel2_xvel_plus_2_a");
85c85
<   if (OPS_kernels[50].count == 0) {
---
>   if (OPS_kernels[45].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[50].count++;
<   OPS_kernels[50].time += t2-t1;
<   OPS_kernels[50].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[50].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[45].count++;
>   OPS_kernels[45].time += t2-t1;
>   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[45].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_plus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_plus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(52,"update_halo_kernel2_xvel_plus_2_b");
---
>   ops_timing_realloc(47,"update_halo_kernel2_xvel_plus_2_b");
85c85
<   if (OPS_kernels[52].count == 0) {
---
>   if (OPS_kernels[47].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[52].count++;
<   OPS_kernels[52].time += t2-t1;
<   OPS_kernels[52].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[52].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[47].count++;
>   OPS_kernels[47].time += t2-t1;
>   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[47].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_plus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_plus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(49,"update_halo_kernel2_xvel_plus_4_a");
---
>   ops_timing_realloc(44,"update_halo_kernel2_xvel_plus_4_a");
85c85
<   if (OPS_kernels[49].count == 0) {
---
>   if (OPS_kernels[44].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[49].count++;
<   OPS_kernels[49].time += t2-t1;
<   OPS_kernels[49].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[49].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[44].count++;
>   OPS_kernels[44].time += t2-t1;
>   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[44].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_xvel_plus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_xvel_plus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
82c82
<   ops_timing_realloc(51,"update_halo_kernel2_xvel_plus_4_b");
---
>   ops_timing_realloc(46,"update_halo_kernel2_xvel_plus_4_b");
85c85
<   if (OPS_kernels[51].count == 0) {
---
>   if (OPS_kernels[46].count == 0) {
98c98
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
105,106c105,106
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
140,143c140,143
<   OPS_kernels[51].count++;
<   OPS_kernels[51].time += t2-t1;
<   OPS_kernels[51].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[51].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[46].count++;
>   OPS_kernels[46].time += t2-t1;
>   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[46].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_minus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_minus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(58,"update_halo_kernel2_yvel_minus_2_a");
---
>   ops_timing_realloc(53,"update_halo_kernel2_yvel_minus_2_a");
84c84
<   if (OPS_kernels[58].count == 0) {
---
>   if (OPS_kernels[53].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[58].count++;
<   OPS_kernels[58].time += t2-t1;
<   OPS_kernels[58].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[58].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[53].count++;
>   OPS_kernels[53].time += t2-t1;
>   OPS_kernels[53].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[53].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_minus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_minus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(60,"update_halo_kernel2_yvel_minus_2_b");
---
>   ops_timing_realloc(55,"update_halo_kernel2_yvel_minus_2_b");
84c84
<   if (OPS_kernels[60].count == 0) {
---
>   if (OPS_kernels[55].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[60].count++;
<   OPS_kernels[60].time += t2-t1;
<   OPS_kernels[60].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[60].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[55].count++;
>   OPS_kernels[55].time += t2-t1;
>   OPS_kernels[55].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[55].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_minus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_minus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(57,"update_halo_kernel2_yvel_minus_4_a");
---
>   ops_timing_realloc(52,"update_halo_kernel2_yvel_minus_4_a");
84c84
<   if (OPS_kernels[57].count == 0) {
---
>   if (OPS_kernels[52].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[57].count++;
<   OPS_kernels[57].time += t2-t1;
<   OPS_kernels[57].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[57].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[52].count++;
>   OPS_kernels[52].time += t2-t1;
>   OPS_kernels[52].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[52].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_minus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_minus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(59,"update_halo_kernel2_yvel_minus_4_b");
---
>   ops_timing_realloc(54,"update_halo_kernel2_yvel_minus_4_b");
84c84
<   if (OPS_kernels[59].count == 0) {
---
>   if (OPS_kernels[54].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[59].count++;
<   OPS_kernels[59].time += t2-t1;
<   OPS_kernels[59].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[59].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[54].count++;
>   OPS_kernels[54].time += t2-t1;
>   OPS_kernels[54].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[54].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_plus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_plus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(62,"update_halo_kernel2_yvel_plus_2_a");
---
>   ops_timing_realloc(57,"update_halo_kernel2_yvel_plus_2_a");
84c84
<   if (OPS_kernels[62].count == 0) {
---
>   if (OPS_kernels[57].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[62].count++;
<   OPS_kernels[62].time += t2-t1;
<   OPS_kernels[62].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[62].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[57].count++;
>   OPS_kernels[57].time += t2-t1;
>   OPS_kernels[57].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[57].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_plus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_plus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(64,"update_halo_kernel2_yvel_plus_2_b");
---
>   ops_timing_realloc(59,"update_halo_kernel2_yvel_plus_2_b");
84c84
<   if (OPS_kernels[64].count == 0) {
---
>   if (OPS_kernels[59].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[64].count++;
<   OPS_kernels[64].time += t2-t1;
<   OPS_kernels[64].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[64].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[59].count++;
>   OPS_kernels[59].time += t2-t1;
>   OPS_kernels[59].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[59].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_plus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_plus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(61,"update_halo_kernel2_yvel_plus_4_a");
---
>   ops_timing_realloc(56,"update_halo_kernel2_yvel_plus_4_a");
84c84
<   if (OPS_kernels[61].count == 0) {
---
>   if (OPS_kernels[56].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[61].count++;
<   OPS_kernels[61].time += t2-t1;
<   OPS_kernels[61].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[61].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[56].count++;
>   OPS_kernels[56].time += t2-t1;
>   OPS_kernels[56].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[56].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel2_yvel_plus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel2_yvel_plus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(63,"update_halo_kernel2_yvel_plus_4_b");
---
>   ops_timing_realloc(58,"update_halo_kernel2_yvel_plus_4_b");
84c84
<   if (OPS_kernels[63].count == 0) {
---
>   if (OPS_kernels[58].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[63].count++;
<   OPS_kernels[63].time += t2-t1;
<   OPS_kernels[63].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[63].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[58].count++;
>   OPS_kernels[58].time += t2-t1;
>   OPS_kernels[58].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[58].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_minus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_minus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(70,"update_halo_kernel3_minus_2_a");
---
>   ops_timing_realloc(65,"update_halo_kernel3_minus_2_a");
84c84
<   if (OPS_kernels[70].count == 0) {
---
>   if (OPS_kernels[65].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[70].count++;
<   OPS_kernels[70].time += t2-t1;
<   OPS_kernels[70].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[70].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[65].count++;
>   OPS_kernels[65].time += t2-t1;
>   OPS_kernels[65].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[65].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_minus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_minus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(72,"update_halo_kernel3_minus_2_b");
---
>   ops_timing_realloc(67,"update_halo_kernel3_minus_2_b");
84c84
<   if (OPS_kernels[72].count == 0) {
---
>   if (OPS_kernels[67].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[72].count++;
<   OPS_kernels[72].time += t2-t1;
<   OPS_kernels[72].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[72].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[67].count++;
>   OPS_kernels[67].time += t2-t1;
>   OPS_kernels[67].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[67].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_minus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_minus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(69,"update_halo_kernel3_minus_4_a");
---
>   ops_timing_realloc(64,"update_halo_kernel3_minus_4_a");
84c84
<   if (OPS_kernels[69].count == 0) {
---
>   if (OPS_kernels[64].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[69].count++;
<   OPS_kernels[69].time += t2-t1;
<   OPS_kernels[69].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[69].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[64].count++;
>   OPS_kernels[64].time += t2-t1;
>   OPS_kernels[64].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[64].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_minus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_minus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(71,"update_halo_kernel3_minus_4_b");
---
>   ops_timing_realloc(66,"update_halo_kernel3_minus_4_b");
84c84
<   if (OPS_kernels[71].count == 0) {
---
>   if (OPS_kernels[66].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[71].count++;
<   OPS_kernels[71].time += t2-t1;
<   OPS_kernels[71].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[71].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[66].count++;
>   OPS_kernels[66].time += t2-t1;
>   OPS_kernels[66].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[66].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_plus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_plus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(66,"update_halo_kernel3_plus_2_a");
---
>   ops_timing_realloc(61,"update_halo_kernel3_plus_2_a");
84c84
<   if (OPS_kernels[66].count == 0) {
---
>   if (OPS_kernels[61].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[66].count++;
<   OPS_kernels[66].time += t2-t1;
<   OPS_kernels[66].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[66].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[61].count++;
>   OPS_kernels[61].time += t2-t1;
>   OPS_kernels[61].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[61].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_plus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_plus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(68,"update_halo_kernel3_plus_2_b");
---
>   ops_timing_realloc(63,"update_halo_kernel3_plus_2_b");
84c84
<   if (OPS_kernels[68].count == 0) {
---
>   if (OPS_kernels[63].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[68].count++;
<   OPS_kernels[68].time += t2-t1;
<   OPS_kernels[68].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[68].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[63].count++;
>   OPS_kernels[63].time += t2-t1;
>   OPS_kernels[63].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[63].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_plus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_plus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(65,"update_halo_kernel3_plus_4_a");
---
>   ops_timing_realloc(60,"update_halo_kernel3_plus_4_a");
84c84
<   if (OPS_kernels[65].count == 0) {
---
>   if (OPS_kernels[60].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[65].count++;
<   OPS_kernels[65].time += t2-t1;
<   OPS_kernels[65].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[65].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[60].count++;
>   OPS_kernels[60].time += t2-t1;
>   OPS_kernels[60].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[60].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel3_plus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel3_plus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(67,"update_halo_kernel3_plus_4_b");
---
>   ops_timing_realloc(62,"update_halo_kernel3_plus_4_b");
84c84
<   if (OPS_kernels[67].count == 0) {
---
>   if (OPS_kernels[62].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[67].count++;
<   OPS_kernels[67].time += t2-t1;
<   OPS_kernels[67].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[67].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[62].count++;
>   OPS_kernels[62].time += t2-t1;
>   OPS_kernels[62].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[62].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_minus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_minus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(74,"update_halo_kernel4_minus_2_a");
---
>   ops_timing_realloc(69,"update_halo_kernel4_minus_2_a");
84c84
<   if (OPS_kernels[74].count == 0) {
---
>   if (OPS_kernels[69].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[74].count++;
<   OPS_kernels[74].time += t2-t1;
<   OPS_kernels[74].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[74].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[69].count++;
>   OPS_kernels[69].time += t2-t1;
>   OPS_kernels[69].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[69].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_minus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_minus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(76,"update_halo_kernel4_minus_2_b");
---
>   ops_timing_realloc(71,"update_halo_kernel4_minus_2_b");
84c84
<   if (OPS_kernels[76].count == 0) {
---
>   if (OPS_kernels[71].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[76].count++;
<   OPS_kernels[76].time += t2-t1;
<   OPS_kernels[76].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[76].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[71].count++;
>   OPS_kernels[71].time += t2-t1;
>   OPS_kernels[71].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[71].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_minus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_minus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(73,"update_halo_kernel4_minus_4_a");
---
>   ops_timing_realloc(68,"update_halo_kernel4_minus_4_a");
84c84
<   if (OPS_kernels[73].count == 0) {
---
>   if (OPS_kernels[68].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[73].count++;
<   OPS_kernels[73].time += t2-t1;
<   OPS_kernels[73].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[73].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[68].count++;
>   OPS_kernels[68].time += t2-t1;
>   OPS_kernels[68].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[68].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_minus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_minus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(75,"update_halo_kernel4_minus_4_b");
---
>   ops_timing_realloc(70,"update_halo_kernel4_minus_4_b");
84c84
<   if (OPS_kernels[75].count == 0) {
---
>   if (OPS_kernels[70].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[75].count++;
<   OPS_kernels[75].time += t2-t1;
<   OPS_kernels[75].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[75].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[70].count++;
>   OPS_kernels[70].time += t2-t1;
>   OPS_kernels[70].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[70].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_plus_2_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_plus_2_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(78,"update_halo_kernel4_plus_2_a");
---
>   ops_timing_realloc(73,"update_halo_kernel4_plus_2_a");
84c84
<   if (OPS_kernels[78].count == 0) {
---
>   if (OPS_kernels[73].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[78].count++;
<   OPS_kernels[78].time += t2-t1;
<   OPS_kernels[78].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[78].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[73].count++;
>   OPS_kernels[73].time += t2-t1;
>   OPS_kernels[73].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[73].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_plus_2_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_plus_2_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(80,"update_halo_kernel4_plus_2_b");
---
>   ops_timing_realloc(75,"update_halo_kernel4_plus_2_b");
84c84
<   if (OPS_kernels[80].count == 0) {
---
>   if (OPS_kernels[75].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[80].count++;
<   OPS_kernels[80].time += t2-t1;
<   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[80].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[75].count++;
>   OPS_kernels[75].time += t2-t1;
>   OPS_kernels[75].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[75].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_plus_4_a_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_plus_4_a_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(77,"update_halo_kernel4_plus_4_a");
---
>   ops_timing_realloc(72,"update_halo_kernel4_plus_4_a");
84c84
<   if (OPS_kernels[77].count == 0) {
---
>   if (OPS_kernels[72].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[77].count++;
<   OPS_kernels[77].time += t2-t1;
<   OPS_kernels[77].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[77].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[72].count++;
>   OPS_kernels[72].time += t2-t1;
>   OPS_kernels[72].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[72].transfer += ops_compute_transfer(dim, range, &arg1);
diff CUDA/update_halo_kernel4_plus_4_b_cuda_kernel.cu ../MPI_CUDA/update_halo_kernel4_plus_4_b_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
81c81
<   ops_timing_realloc(79,"update_halo_kernel4_plus_4_b");
---
>   ops_timing_realloc(74,"update_halo_kernel4_plus_4_b");
84c84
<   if (OPS_kernels[79].count == 0) {
---
>   if (OPS_kernels[74].count == 0) {
97c97
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   consts_bytes += ROUND_UP(15*sizeof(int));
104,105c104,105
<   for (int d=0; d<NUM_FIELDS; d++) ((int *)arg2.data)[d] = arg2h[d];
<   consts_bytes += ROUND_UP(NUM_FIELDS*sizeof(int));
---
>   for (int d=0; d<15; d++) ((int *)arg2.data)[d] = arg2h[d];
>   consts_bytes += ROUND_UP(15*sizeof(int));
139,142c139,142
<   OPS_kernels[79].count++;
<   OPS_kernels[79].time += t2-t1;
<   OPS_kernels[79].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[79].transfer += ops_compute_transfer(dim, range, &arg1);
---
>   OPS_kernels[74].count++;
>   OPS_kernels[74].time += t2-t1;
>   OPS_kernels[74].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[74].transfer += ops_compute_transfer(dim, range, &arg1);
Only in ../MPI_CUDA/: update_halo_kernel.h
Only in ../MPI_CUDA/: update_halo_ops.cpp
Only in ../MPI_CUDA/: viscosity.cpp
diff CUDA/viscosity_kernel_cuda_kernel.cu ../MPI_CUDA/viscosity_kernel_cuda_kernel.cu
2c2
< // auto-generated by ops.py on 2014-04-09 16:04
---
> // auto-generated by ops.py on 2014-03-18 10:09
159c159
<   ops_timing_realloc(34,"viscosity_kernel");
---
>   ops_timing_realloc(35,"viscosity_kernel");
162c162
<   if (OPS_kernels[34].count == 0) {
---
>   if (OPS_kernels[35].count == 0) {
253,261c253,261
<   OPS_kernels[34].count++;
<   OPS_kernels[34].time += t2-t1;
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg0);
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg1);
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg2);
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg3);
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg4);
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg5);
<   OPS_kernels[34].transfer += ops_compute_transfer(dim, range, &arg6);
---
>   OPS_kernels[35].count++;
>   OPS_kernels[35].time += t2-t1;
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg0);
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg1);
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg2);
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg3);
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg4);
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg5);
>   OPS_kernels[35].transfer += ops_compute_transfer(dim, range, &arg6);
Only in ../MPI_CUDA/: viscosity_kernel.h
Only in ../MPI_CUDA/: viscosity_ops.cpp
