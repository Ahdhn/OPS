//
// auto-generated by ops.py on 2013-11-12 12:17
//

//user function
#include "field_summary_kernel.h"

__global__ void ops_field_summary_kernel(
const double* __restrict arg0,
const double* __restrict arg1,
const double* __restrict arg2,
const double* __restrict arg3,
const double* __restrict arg4,
const double* __restrict arg5,
int size0,
int size1 ){

  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1 + idx_y * 1 * xdim0_device;
  arg1 += idx_x * 1 + idx_y * 1 * xdim1_device;
  arg2 += idx_x * 1 + idx_y * 1 * xdim2_device;
  arg3 += idx_x * 1 + idx_y * 1 * xdim3_device;
  arg4 += idx_x * 1 + idx_y * 1 * xdim4_device;
  arg5 += idx_x * 1 + idx_y * 1 * xdim5_device;
  arg6 += idx_x * 1 + idx_y * 1 * xdim6_device;
  arg7 += idx_x * 1 + idx_y * 1 * xdim7_device;
  arg8 += idx_x * 1 + idx_y * 1 * xdim8_device;
  arg9 += idx_x * 1 + idx_y * 1 * xdim9_device;
  arg10 += idx_x * 1 + idx_y * 1 * xdim10_device;
  if (idx_x < size0 && idx_y < size1) {
    field_summary_kernel(arg0 ,arg1 ,arg2 ,arg3 ,
arg4 ,arg5 ,arg6 ,arg7 ,arg8 ,
arg9 ,arg10 );
  }
}

// host stub function
void ops_par_loop_field_summary_kernel(char const *name, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8,
 ops_arg arg9, ops_arg arg10) {

  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10};


  double*arg6h = (double *)arg6.data;
  double*arg7h = (double *)arg7.data;
  double*arg8h = (double *)arg8.data;
  double*arg9h = (double *)arg9.data;
  double*arg10h = (double *)arg10.data;
  //allocate and initialise arrays for global reduction
  //assumes a max of 64 threads with a cacche line size of 64 bytes
  double arg_gbl6[1 * 64 * 64];
  double arg_gbl7[1 * 64 * 64];
  double arg_gbl8[1 * 64 * 64];
  double arg_gbl9[1 * 64 * 64];
  double arg_gbl10[1 * 64 * 64];

  int x_size = range[1]-range[0];
  int y_size = range[3]-range[2];

  int xdim0 = args[0].dat->block_size[0];
  int xdim1 = args[1].dat->block_size[0];
  int xdim2 = args[2].dat->block_size[0];
  int xdim3 = args[3].dat->block_size[0];
  int xdim4 = args[4].dat->block_size[0];
  int xdim5 = args[5].dat->block_size[0];

  cudaMemcpyToSymbol( xdim0_device, &xdim0, sizeof(int) );
  cudaMemcpyToSymbol( xdim1_device, &xdim1, sizeof(int) );
  cudaMemcpyToSymbol( xdim2_device, &xdim2, sizeof(int) );
  cudaMemcpyToSymbol( xdim3_device, &xdim3, sizeof(int) );
  cudaMemcpyToSymbol( xdim4_device, &xdim4, sizeof(int) );
  cudaMemcpyToSymbol( xdim5_device, &xdim5, sizeof(int) );
  cudaMemcpyToSymbol( dt_device,  &dt, sizeof(double) );

  char *p_a[11];


  //set up initial pointers
  p_a[0] = &args[0].data_d[
  + args[0].dat->size * args[0].dat->block_size[0] * ( range[2] * 1 - args[0].dat->offset[1] )
  + args[0].dat->size * ( range[0] * 1 - args[0].dat->offset[0] ) ];

  p_a[1] = &args[1].data_d[
  + args[1].dat->size * args[1].dat->block_size[0] * ( range[2] * 1 - args[1].dat->offset[1] )
  + args[1].dat->size * ( range[0] * 1 - args[1].dat->offset[0] ) ];

  p_a[2] = &args[2].data_d[
  + args[2].dat->size * args[2].dat->block_size[0] * ( range[2] * 1 - args[2].dat->offset[1] )
  + args[2].dat->size * ( range[0] * 1 - args[2].dat->offset[0] ) ];

  p_a[3] = &args[3].data_d[
  + args[3].dat->size * args[3].dat->block_size[0] * ( range[2] * 1 - args[3].dat->offset[1] )
  + args[3].dat->size * ( range[0] * 1 - args[3].dat->offset[0] ) ];

  p_a[4] = &args[4].data_d[
  + args[4].dat->size * args[4].dat->block_size[0] * ( range[2] * 1 - args[4].dat->offset[1] )
  + args[4].dat->size * ( range[0] * 1 - args[4].dat->offset[0] ) ];

  p_a[5] = &args[5].data_d[
  + args[5].dat->size * args[5].dat->block_size[0] * ( range[2] * 1 - args[5].dat->offset[1] )
  + args[5].dat->size * ( range[0] * 1 - args[5].dat->offset[0] ) ];

  p_a[6] = (char *)args[6].data;

  p_a[7] = (char *)args[7].data;

  p_a[8] = (char *)args[8].data;

  p_a[9] = (char *)args[9].data;

  p_a[10] = (char *)args[10].data;


  ops_halo_exchanges_cuda(args, 11);

  int block_size = 16;
  dim3 grid( (x_size-1)/block_size+ 1, (y_size-1)/block_size + 1, 1);
  dim3 block(16,16,1);

  //call kernel wrapper function, passing in pointers to data
  ops_field_summary_kernel<<<grid, block >>> (  (double *)p_a[0], (double *)p_a[1],
           (double *)p_a[2], (double *)p_a[3],
           (double *)p_a[4], (double *)p_a[5],
           &arg_gbl6[64*thr] &arg_gbl7[64*thr]
           &arg_gbl8[64*thr] &arg_gbl9[64*thr]
           &arg_gbl10[64*thr]x_size, y_size);


  // combine reduction data
  for ( int thr=0; thr<nthreads; thr++ ){
    for ( int d=0; d<1; d++ ){
      arg6h[0] += arg_gbl6[64*thr];
    }
    for ( int d=0; d<1; d++ ){
      arg7h[0] += arg_gbl7[64*thr];
    }
    for ( int d=0; d<1; d++ ){
      arg8h[0] += arg_gbl8[64*thr];
    }
    for ( int d=0; d<1; d++ ){
      arg9h[0] += arg_gbl9[64*thr];
    }
    for ( int d=0; d<1; d++ ){
      arg10h[0] += arg_gbl10[64*thr];
    }
  }
  cudaDeviceSynchronize();
  ops_set_dirtybit_cuda(args, 11);
}
