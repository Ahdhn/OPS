//
// auto-generated by ops.py on 2013-11-04 17:14
//

#include "lib.h"
//user function
#include "advec_mom_kernel.h"

// host stub function
void ops_par_loop_advec_mom_kernel1_y(char const *name, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {

  char *p_a[6];
  int  offs[6][2];
  int  count[dim];

  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4, arg5};


  for ( int i=0; i<6; i++ ){
    if (args[i].stencil!=NULL) {
      offs[i][0] = 1;  //unit step in x dimension
      offs[i][1] = ops_offs_set(range[0],range[2]+1, args[i]) - ops_offs_set(range[1],range[2], args[i]);
      //stride in y as x stride is 0
      if (args[i].stencil->stride[0] == 0) {
        offs[i][0] = 0;
        offs[i][1] = args[i].dat->block_size[0];
      }
      //stride in x as y stride is 0
      else if (args[i].stencil->stride[1] == 0) {
        offs[i][0] = 1;
        offs[i][1] = -( range[1] - range[0] );
      }
    }
  }
  int off0_1 = offs[0][0];
  int off0_2 = offs[0][1];
  int dat0 = args[0].dat->size;
  int off1_1 = offs[1][0];
  int off1_2 = offs[1][1];
  int dat1 = args[1].dat->size;
  int off2_1 = offs[2][0];
  int off2_2 = offs[2][1];
  int dat2 = args[2].dat->size;
  int off3_1 = offs[3][0];
  int off3_2 = offs[3][1];
  int dat3 = args[3].dat->size;
  int off4_1 = offs[4][0];
  int off4_2 = offs[4][1];
  int dat4 = args[4].dat->size;
  int off5_1 = offs[5][0];
  int off5_2 = offs[5][1];
  int dat5 = args[5].dat->size;

  //set up initial pointers
  p_a[0] = (char *)args[0].data
  + args[0].dat->size * args[0].dat->block_size[0] * ( range[2] * args[0].stencil->stride[1] - args[0].dat->offset[1] )
  + args[0].dat->size * ( range[0] * args[0].stencil->stride[0] - args[0].dat->offset[0] );

  p_a[1] = (char *)args[1].data
  + args[1].dat->size * args[1].dat->block_size[0] * ( range[2] * args[1].stencil->stride[1] - args[1].dat->offset[1] )
  + args[1].dat->size * ( range[0] * args[1].stencil->stride[0] - args[1].dat->offset[0] );

  p_a[2] = (char *)args[2].data
  + args[2].dat->size * args[2].dat->block_size[0] * ( range[2] * args[2].stencil->stride[1] - args[2].dat->offset[1] )
  + args[2].dat->size * ( range[0] * args[2].stencil->stride[0] - args[2].dat->offset[0] );

  p_a[3] = (char *)args[3].data
  + args[3].dat->size * args[3].dat->block_size[0] * ( range[2] * args[3].stencil->stride[1] - args[3].dat->offset[1] )
  + args[3].dat->size * ( range[0] * args[3].stencil->stride[0] - args[3].dat->offset[0] );

  p_a[4] = (char *)args[4].data
  + args[4].dat->size * args[4].dat->block_size[0] * ( range[2] * args[4].stencil->stride[1] - args[4].dat->offset[1] )
  + args[4].dat->size * ( range[0] * args[4].stencil->stride[0] - args[4].dat->offset[0] );

  p_a[5] = (char *)args[5].data
  + args[5].dat->size * args[5].dat->block_size[0] * ( range[2] * args[5].stencil->stride[1] - args[5].dat->offset[1] )
  + args[5].dat->size * ( range[0] * args[5].stencil->stride[0] - args[5].dat->offset[0] );


  xdim0 = args[0].dat->block_size[0];
  xdim1 = args[1].dat->block_size[0];
  xdim2 = args[2].dat->block_size[0];
  xdim3 = args[3].dat->block_size[0];
  xdim4 = args[4].dat->block_size[0];
  xdim5 = args[5].dat->block_size[0];

  for ( int n_y=range[2]; n_y<range[3]; n_y++ ){
    for ( int n_x=range[0]; n_x<range[1]; n_x++ ){
      //call kernel function, passing in pointers to data

      advec_mom_kernel1_y(  (double *)p_a[0], (double *)p_a[1], (double *)p_a[2],
           (double *)p_a[3], (double *)p_a[4], (double *)p_a[5] );


      //shift pointers to data x direction
      p_a[0]= p_a[0] + (dat0 * off0_1);
      p_a[1]= p_a[1] + (dat1 * off1_1);
      p_a[2]= p_a[2] + (dat2 * off2_1);
      p_a[3]= p_a[3] + (dat3 * off3_1);
      p_a[4]= p_a[4] + (dat4 * off4_1);
      p_a[5]= p_a[5] + (dat5 * off5_1);
    }

    //shift pointers to data y direction
    p_a[0]= p_a[0] + (dat0 * off0_2);
    p_a[1]= p_a[1] + (dat1 * off1_2);
    p_a[2]= p_a[2] + (dat2 * off2_2);
    p_a[3]= p_a[3] + (dat3 * off3_2);
    p_a[4]= p_a[4] + (dat4 * off4_2);
    p_a[5]= p_a[5] + (dat5 * off5_2);
  }
}
