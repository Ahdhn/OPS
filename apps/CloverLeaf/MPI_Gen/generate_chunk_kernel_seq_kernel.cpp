//
// auto-generated by ops.py on 2014-02-20 11:47
//

#include "ops_lib_mpi.h"
//user function
#include "generate_chunk_kernel.h"


inline int mult(int* s, int r)
{
  int result = 1;
  if(r > 0) {
    for(int i = 0; i<r;i++) result *= s[i];
  }
  return result;
}

inline int add(int* co, int* s, int r)
{
  int result = co[0];
  for(int i = 1; i<=r;i++) result += co[i]*mult(s,i);
  return result;
}


inline int off(int ndim, int r, int* ps, int* pe, int* size, int* std)
{

  int i = 0;
  int* c1 = (int*) xmalloc(sizeof(int)*ndim);
  int* c2 = (int*) xmalloc(sizeof(int)*ndim);

  for(i=0; i<ndim; i++) c1[i] = ps[i];
  c1[r] = ps[r] + 1*std[r];

  for(i = 0; i<r; i++) std[i]!=0 ? c2[i] = pe[i]:c2[i] = ps[i]+1;
  for(i=r; i<ndim; i++) c2[i] = ps[i];

  //int off =  add(c1, size, r) - add(c2, size, r) + 1; //plus 1 to get the next element .. from ops_seq.h
  int off =  add(c1, size, r) - add(c2, size, r);

  free(c1);free(c2);
  return off;
}

inline int address(int ndim, int dat_size, int* ps, int* size, int* std, int* off)
{
  int base = 0;
  for(int i=0; i<ndim; i++) {
    base = base + dat_size * mult(size, i) * (ps[i] * std[i] - off[i]);
  }
  return base;
}

// host stub function
void ops_par_loop_generate_chunk_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {

  char *p_a[8];
  int  offs[8][2];
  ops_arg args[8] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7};


  sub_block_list sb = OPS_sub_block_list[block->index];
  //compute localy allocated range for the sub-block
  int ndim = sb->ndim;
  int start[ndim*8];
  int end[ndim*8];

  int s[ndim];
  int e[ndim];

  for ( int n=0; n<ndim; n++ ){
    s[n] = sb->istart[n];e[n] = sb->iend[n]+1;
    if (s[n] >= range[2*n]) {
      s[n] = 0;
    }
    else {
      s[n] = range[2*n] - s[n];
    }
    if (e[n] >= range[2*n+1]) {
      e[n] = range[2*n+1] - sb->istart[n];
    }
    else {
      e[n] = sb->sizes[n];
    }
  }

  for ( int i=0; i<8; i++ ){
    for ( int n=0; n<ndim; n++ ){
      start[i*ndim+n] = s[n];
      end[i*ndim+n]   = e[n];
    }
  }

  #ifdef OPS_DEBUG
  ops_register_args(args, "generate_chunk_kernel");
  #endif

  for (int i = 0; i<8;i++) {
    if(args[i].stencil!=NULL) {
      offs[i][0] = args[i].stencil->stride[0]*1;  //unit step in x dimension
      for(int n=1; n<ndim; n++) {
        offs[i][n] = off(ndim, n, &start[i*ndim], &end[i*ndim],
        args[i].dat->block_size, args[i].stencil->stride) - (1 * (1-args[i].stencil->stride[n]));
        printf("%s stride %d compliment %d\n", args[i].dat->name,args[i].stencil->stride[n], (1 * (1-args[i].stencil->stride[n])));
      }
    }
  }

  //set up initial pointers
  for (int i = 0; i < 8; i++) {
    if (args[i].argtype == OPS_ARG_DAT) {
      p_a[i] = (char *)args[i].data //base of 2D array
      + address(ndim, args[i].dat->size, &start[i*ndim],
        args[i].dat->block_size, args[i].stencil->stride, args[i].dat->offset);
    }
    else if (args[i].argtype == OPS_ARG_GBL)
      p_a[i] = (char *)args[i].data;
  }

  /*
  offs[0][0] = args[0].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[0][n] = off2(ndim, n, &start[0*ndim],
    &end[0*ndim],args[0].dat->block_size, args[0].stencil->stride);
  }
  //set up initial pointers
  p_a[0] = (char *)args[0].data
  + address2(ndim, args[0].dat->size, &start[0*ndim],
  args[0].dat->block_size, args[0].stencil->stride, args[0].dat->offset);
  ops_exchange_halo(&args[0],2);

  offs[1][0] = args[1].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[1][n] = off2(ndim, n, &start[1*ndim],
    &end[1*ndim],args[1].dat->block_size, args[1].stencil->stride);
  }
  //set up initial pointers
  p_a[1] = (char *)args[1].data
  + address2(ndim, args[1].dat->size, &start[1*ndim],
  args[1].dat->block_size, args[1].stencil->stride, args[1].dat->offset);
  ops_exchange_halo(&args[1],2);

  offs[2][0] = args[2].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[2][n] = off2(ndim, n, &start[2*ndim],
    &end[2*ndim],args[2].dat->block_size, args[2].stencil->stride);
  }
  //set up initial pointers
  p_a[2] = (char *)args[2].data
  + address2(ndim, args[2].dat->size, &start[2*ndim],
  args[2].dat->block_size, args[2].stencil->stride, args[2].dat->offset);

  offs[3][0] = args[3].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[3][n] = off2(ndim, n, &start[3*ndim],
    &end[3*ndim],args[3].dat->block_size, args[3].stencil->stride);
  }
  //set up initial pointers
  p_a[3] = (char *)args[3].data
  + address2(ndim, args[3].dat->size, &start[3*ndim],
  args[3].dat->block_size, args[3].stencil->stride, args[3].dat->offset);

  offs[4][0] = args[4].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[4][n] = off2(ndim, n, &start[4*ndim],
    &end[4*ndim],args[4].dat->block_size, args[4].stencil->stride);
  }
  //set up initial pointers
  p_a[4] = (char *)args[4].data
  + address2(ndim, args[4].dat->size, &start[4*ndim],
  args[4].dat->block_size, args[4].stencil->stride, args[4].dat->offset);

  offs[5][0] = args[5].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[5][n] = off2(ndim, n, &start[5*ndim],
    &end[5*ndim],args[5].dat->block_size, args[5].stencil->stride);
  }
  //set up initial pointers
  p_a[5] = (char *)args[5].data
  + address2(ndim, args[5].dat->size, &start[5*ndim],
  args[5].dat->block_size, args[5].stencil->stride, args[5].dat->offset);

  offs[6][0] = args[6].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[6][n] = off2(ndim, n, &start[6*ndim],
    &end[6*ndim],args[6].dat->block_size, args[6].stencil->stride);
  }
  //set up initial pointers
  p_a[6] = (char *)args[6].data
  + address2(ndim, args[6].dat->size, &start[6*ndim],
  args[6].dat->block_size, args[6].stencil->stride, args[6].dat->offset);
  ops_exchange_halo(&args[6],2);

  offs[7][0] = args[7].stencil->stride[0]*1;  //unit step in x dimension
  for ( int n=1; n<ndim; n++ ){
    offs[7][n] = off2(ndim, n, &start[7*ndim],
    &end[7*ndim],args[7].dat->block_size, args[7].stencil->stride);
  }
  //set up initial pointers
  p_a[7] = (char *)args[7].data
  + address2(ndim, args[7].dat->size, &start[7*ndim],
  args[7].dat->block_size, args[7].stencil->stride, args[7].dat->offset);
  ops_exchange_halo(&args[7],2);


  int off0_1 = offs[0][0];
  int off0_2 = offs[0][1];
  int dat0 = args[0].dat->size;
  int off1_1 = offs[1][0];
  int off1_2 = offs[1][1];
  int dat1 = args[1].dat->size;
  int off2_1 = offs[2][0];
  int off2_2 = offs[2][1];
  int dat2 = args[2].dat->size;
  int off3_1 = offs[3][0];
  int off3_2 = offs[3][1];
  int dat3 = args[3].dat->size;
  int off4_1 = offs[4][0];
  int off4_2 = offs[4][1];
  int dat4 = args[4].dat->size;
  int off5_1 = offs[5][0];
  int off5_2 = offs[5][1];
  int dat5 = args[5].dat->size;
  int off6_1 = offs[6][0];
  int off6_2 = offs[6][1];
  int dat6 = args[6].dat->size;
  int off7_1 = offs[7][0];
  int off7_2 = offs[7][1];
  int dat7 = args[7].dat->size;*/


  int  count[dim];
  int total_range = 1;
  for (int n=0; n<ndim; n++) {
    count[n] = e[n]-s[n];  // number in each dimension
    total_range *= count[n];
  }
  count[dim-1]++;     // extra in last to ensure correct termination

  xdim0 = args[0].dat->block_size[0];
  xdim1 = args[1].dat->block_size[0];
  xdim2 = args[2].dat->block_size[0];
  xdim3 = args[3].dat->block_size[0];
  xdim4 = args[4].dat->block_size[0];
  xdim5 = args[5].dat->block_size[0];
  xdim6 = args[6].dat->block_size[0];
  xdim7 = args[7].dat->block_size[0];

  for (int i = 0; i < 8; i++) {
    if(args[i].argtype == OPS_ARG_DAT)
      ops_exchange_halo(&args[i],2);
  }

  if(0) {

  for (int nt=0; nt<total_range; nt++) {
    // call kernel function, passing in pointers to data

    generate_chunk_kernel(  (double *)p_a[0], (double *)p_a[1], (double *)p_a[2],
     (double *)p_a[3], (double *)p_a[4], (double *)p_a[5], (double *)p_a[6],
     (double *)p_a[7] );
    //printf("%d ",nt);

    count[0]--;   // decrement counter
    int m = 0;    // max dimension with changed index
    while (count[m]==0) {
      count[m] =  e[m]-s[m];// reset counter
      m++;                        // next dimension
      count[m]--;                 // decrement counter
    }

    // shift pointers to data
    for (int i=0; i<8; i++) {
      if (args[i].argtype == OPS_ARG_DAT)
        p_a[i] = p_a[i] + (args[i].dat->size * offs[i][m]);
    }
  }

  } else {

  int xrange = e[0]-s[0];
  int yrange = e[1]-s[1];
  printf(" e[1]-s[1] %d, count[1] %d\n",yrange,count[1]);
  printf(" e[0]-s[0] %d, count[0] %d\n",xrange,count[0]);

  for ( int n_y=0; n_y<yrange; n_y++ ){
    for ( int n_x=0; n_x<xrange; n_x++ ){
      generate_chunk_kernel( (double *)p_a[0], (double *)p_a[1], (double *)p_a[2],
           (double *)p_a[3], (double *)p_a[4], (double *)p_a[5], (double *)p_a[6],
           (double *)p_a[7] );
      //printf("%d ",n_y*(e[0]-s[0]) + n_x);
      //shift pointers to data x direction
      //for (int i=0; i<8; i++) {
        //if (args[i].argtype == OPS_ARG_DAT)
          p_a[0] = p_a[0] + (args[0].dat->size * offs[0][0]);
          p_a[1] = p_a[1] + (args[1].dat->size * offs[1][0]);
          p_a[2] = p_a[2] + (args[2].dat->size * offs[2][0]);
          p_a[3] = p_a[3] + (args[3].dat->size * offs[3][0]);
          p_a[4] = p_a[4] + (args[4].dat->size * offs[4][0]);
          p_a[5] = p_a[5] + (args[5].dat->size * offs[5][0]);
          p_a[6] = p_a[6] + (args[6].dat->size * offs[6][0]);
          p_a[7] = p_a[7] + (args[7].dat->size * offs[7][0]);
      //}
    }

    //shift pointers to data y direction
    //for (int i=0; i<8; i++) {
      //if (args[i].argtype == OPS_ARG_DAT)
        /*p_a[0] = p_a[0] + (args[0].dat->size * (offs[0][1] - 1) );
        p_a[1] = p_a[1] + (args[1].dat->size * (offs[1][1] - 0) );
        p_a[2] = p_a[2] + (args[2].dat->size * (offs[2][1] - 1) );
        p_a[3] = p_a[3] + (args[3].dat->size * (offs[3][1] - 1) );
        p_a[4] = p_a[4] + (args[4].dat->size * (offs[4][1] - 1) );
        p_a[5] = p_a[5] + (args[5].dat->size * (offs[5][1] - 1) );
        p_a[6] = p_a[6] + (args[6].dat->size * (offs[6][1] - 1) );
        p_a[7] = p_a[7] + (args[7].dat->size * (offs[7][1] - 0) );*/

        p_a[0] = p_a[0] + (args[0].dat->size * (offs[0][1] - 0) );
        p_a[1] = p_a[1] + (args[1].dat->size * (offs[1][1] - 0) );
        p_a[2] = p_a[2] + (args[2].dat->size * (offs[2][1] - 0) );
        p_a[3] = p_a[3] + (args[3].dat->size * (offs[3][1] - 0) );
        p_a[4] = p_a[4] + (args[4].dat->size * (offs[4][1] - 0) );
        p_a[5] = p_a[5] + (args[5].dat->size * (offs[5][1] - 0) );
        p_a[6] = p_a[6] + (args[6].dat->size * (offs[6][1] - 0) );
        p_a[7] = p_a[7] + (args[7].dat->size * (offs[7][1] - 0) );
    //}
  }

  }
  //exit(0);
  ops_set_halo_dirtybit(args, 8);


}
