//
// auto-generated by ops.py on 2013-10-22 11:17
//

#include "lib.h"
#ifdef _OPENMP
#include <omp.h>
#endif
//user function
#include "field_summary_kernel.h"

// host stub function
void ops_par_loop_field_summary_kernel(char const *name, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {

  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10};

  double*arg6h = (double *)arg6.data;
  double*arg7h = (double *)arg7.data;
  double*arg8h = (double *)arg8.data;
  double*arg9h = (double *)arg9.data;
  double*arg10h = (double *)arg10.data;

  //setup offsets
  int  offs[11][2];

  for ( int i=0; i<11; i++ ){
    if (args[i].stencil!=NULL) {
      offs[i][0] = 1;  //unit step in x dimension
      offs[i][1] = ops_offs_set(range[0],range[2]+1, args[i]) - ops_offs_set(range[1],range[2], args[i]);
      //stride in y as x stride is 0
      if (args[i].stencil->stride[0] == 0) {
        offs[i][0] = 0;
        offs[i][1] = args[i].dat->block_size[0];
      }
      //stride in x as y stride is 0
      else if (args[i].stencil->stride[1] == 0) {
        offs[i][0] = 1;
        offs[i][1] = -( range[1] - range[0] );
      }
    }
  }

  #ifdef _OPENMP
  int nthreads = omp_get_max_threads( );
  #else
  int nthreads = 1;
  #endif

  //allocate and initialise arrays for global reduction
  double *arg_gbl6[nthreads];
  double *arg_gbl7[nthreads];
  double *arg_gbl8[nthreads];
  double *arg_gbl9[nthreads];
  double *arg_gbl10[nthreads];
  for ( int thr=0; thr<nthreads; thr++ ){
    arg_gbl6[thr] = (double *)malloc(1 * sizeof(double ));
    arg_gbl7[thr] = (double *)malloc(1 * sizeof(double ));
    arg_gbl8[thr] = (double *)malloc(1 * sizeof(double ));
    arg_gbl9[thr] = (double *)malloc(1 * sizeof(double ));
    arg_gbl10[thr] = (double *)malloc(1 * sizeof(double ));
  }

  int y_size = range[3]-range[2];
  #pragma omp parallel for
  for ( int thr=0; thr<nthreads; thr++ ){

    char **p_a[11];

    //store index of non_gbl args
    int non_gbl[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    int g = 0;
    for ( int i=0; i<11; i++ ){
      if (args[i].argtype == OPS_ARG_DAT) {
        p_a[i] = (char **)malloc(args[i].stencil->points * sizeof(char *));
        non_gbl[g++] = i;
      }
    }

    int start = range[2] + ((y_size-1)/nthreads+1)*thr;
    int finish = range[2] +  MIN(((y_size-1)/nthreads+1)*(thr+1),y_size);

    //set up initial pointers
    ops_arg_set(range[0], start, args[0], p_a[0]);
    ops_arg_set(range[0], start, args[1], p_a[1]);
    ops_arg_set(range[0], start, args[2], p_a[2]);
    ops_arg_set(range[0], start, args[3], p_a[3]);
    ops_arg_set(range[0], start, args[4], p_a[4]);
    ops_arg_set(range[0], start, args[5], p_a[5]);

    for ( int n_y=start; n_y<finish; n_y++ ){
      for ( int n_x=range[0]; n_x<range[1]; n_x++ ){
        //call kernel function, passing in pointers to data

        field_summary_kernel(  (double **)p_a[0], (double **)p_a[1],
           (double **)p_a[2], (double **)p_a[3],
           (double **)p_a[4], (double **)p_a[5],
           (double **) &arg_gbl6[thr], (double **) &arg_gbl7[thr],
           (double **) &arg_gbl8[thr], (double **) &arg_gbl9[thr],
           (double **) &arg_gbl10[thr] );

        int a = 0;
        //shift pointers to data x direction
        for ( int i=0; i<g; i++ ){
          a = non_gbl[i];
          for ( int np=0; np<args[a].stencil->points; np++ ){
            p_a[a][np] = p_a[a][np] + (args[a].dat->size * offs[a][0]);
          }
        }
      }

      int a = 0;
      //shift pointers to data y direction
      for ( int i=0; i<g; i++ ){
        a = non_gbl[i];
        for ( int np=0; np<args[a].stencil->points; np++ ){
          p_a[a][np] = p_a[a][np] + (args[a].dat->size * offs[a][1]);
        }
      }
    }

    free(p_a[0]);
    free(p_a[1]);
    free(p_a[2]);
    free(p_a[3]);
    free(p_a[4]);
    free(p_a[5]);
  }

  // combine reduction data
  for ( int thr=0; thr<nthreads; thr++ ){
    for ( int d=0; d<1; d++ ){
      arg6h[d] += arg_gbl6[thr][d];
    }
    for ( int d=0; d<1; d++ ){
      arg7h[d] += arg_gbl7[thr][d];
    }
    for ( int d=0; d<1; d++ ){
      arg8h[d] += arg_gbl8[thr][d];
    }
    for ( int d=0; d<1; d++ ){
      arg9h[d] += arg_gbl9[thr][d];
    }
    for ( int d=0; d<1; d++ ){
      arg10h[d] += arg_gbl10[thr][d];
    }
  }
  for ( int thr=0; thr<nthreads; thr++ ){
    free(arg_gbl6[thr]);
    free(arg_gbl7[thr]);
    free(arg_gbl8[thr]);
    free(arg_gbl9[thr]);
    free(arg_gbl10[thr]);
  }
}
