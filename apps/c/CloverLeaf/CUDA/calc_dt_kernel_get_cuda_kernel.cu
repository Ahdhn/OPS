//
// auto-generated by ops.py
//
__constant__ int xdim0_calc_dt_kernel_get;
int xdim0_calc_dt_kernel_get_h = -1;
__constant__ int xdim1_calc_dt_kernel_get;
int xdim1_calc_dt_kernel_get_h = -1;

#undef OPS_ACC0
#undef OPS_ACC1


#define OPS_ACC0(x,y) (x+xdim0_calc_dt_kernel_get*(y))
#define OPS_ACC1(x,y) (x+xdim1_calc_dt_kernel_get*(y))

//user function
__device__

void calc_dt_kernel_get_gpu(const double* cellx, const double* celly, double* xl_pos, double* yl_pos) {
  *xl_pos = cellx[OPS_ACC0(0,0)];
  *yl_pos = celly[OPS_ACC1(0,0)];
}



#undef OPS_ACC0
#undef OPS_ACC1


__global__ void ops_calc_dt_kernel_get(
const double* __restrict arg0,
const double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
int size0,
int size1 ){

  double arg2_l[1];
  double arg3_l[1];
  for (int d=0; d<1; d++) arg2_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg3_l[d] = ZERO_double;

  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 0*1 * xdim0_calc_dt_kernel_get;
  arg1 += idx_x * 0*1 + idx_y * 1*1 * xdim1_calc_dt_kernel_get;

  if (idx_x < size0 && idx_y < size1) {
    calc_dt_kernel_get_gpu(arg0, arg1, arg2_l, arg3_l);
  }
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg2[d+(blockIdx.x + blockIdx.y*gridDim.x)*1],arg2_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg3[d+(blockIdx.x + blockIdx.y*gridDim.x)*1],arg3_l[d]);

}
void CUDART_CB calc_dt_kernel_get_reduce_callback(cudaStream_t stream, cudaError_t status, void *data) {
  char *buf = (char*)data;
  int maxblocks = *(int*)buf;
  double*arg2h = *(double**)(&buf[sizeof(int)+0*2*(sizeof(int*))]);
  double*arg2data = *(double**)(&buf[sizeof(int)+0*2*(sizeof(int*))+sizeof(int*)]);
  double*arg3h = *(double**)(&buf[sizeof(int)+1*2*(sizeof(int*))]);
  double*arg3data = *(double**)(&buf[sizeof(int)+1*2*(sizeof(int*))+sizeof(int*)]);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg2h[d] = arg2h[d] + arg2data[d+b*1];
    }
  }

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg3h[d] = arg3h[d] + arg3data[d+b*1];
    }
  }

  free(buf);
}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_calc_dt_kernel_get(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {
#else
#ifdef OPS_HYBRID
void ops_par_loop_calc_dt_kernel_get_execute_gpu(ops_kernel_descriptor *desc) {
#else
void ops_par_loop_calc_dt_kernel_get_execute(ops_kernel_descriptor *desc) {
#endif
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[4] = { arg0, arg1, arg2, arg3};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,4,range,29)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(29,"calc_dt_kernel_get");
    OPS_kernels[29].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<2; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];

  if (xdim0 != xdim0_calc_dt_kernel_get_h || xdim1 != xdim1_calc_dt_kernel_get_h) {
    cudaMemcpyToSymbolAsync( xdim0_calc_dt_kernel_get, &xdim0, sizeof(int),0 );
    xdim0_calc_dt_kernel_get_h = xdim0;
    cudaMemcpyToSymbolAsync( xdim1_calc_dt_kernel_get, &xdim1, sizeof(int),0 );
    xdim1_calc_dt_kernel_get_h = xdim1;
  }


  #ifdef OPS_LAZY
  ops_block block = desc->block;
  #endif
  #ifdef OPS_MPI
  double *arg2h = (double *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * block->index);
  if (ops_hybrid) arg2h =  (double *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * (2*block->index+1));
  #else
  double *arg2h = (double *)(((ops_reduction)args[2].data)->data);
  if (ops_hybrid) arg2h = (double *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size);
  #endif
  #ifdef OPS_MPI
  double *arg3h = (double *)(((ops_reduction)args[3].data)->data + ((ops_reduction)args[3].data)->size * block->index);
  if (ops_hybrid) arg3h =  (double *)(((ops_reduction)args[3].data)->data + ((ops_reduction)args[3].data)->size * (2*block->index+1));
  #else
  double *arg3h = (double *)(((ops_reduction)args[3].data)->data);
  if (ops_hybrid) arg3h = (double *)(((ops_reduction)args[3].data)->data + ((ops_reduction)args[3].data)->size);
  #endif

  dim3 grid( (x_size-1)/OPS_block_size_x+ 1, (y_size-1)/OPS_block_size_y + 1, 1);
  dim3 tblock(OPS_block_size_x,OPS_block_size_y,1);

  int nblocks = ((x_size-1)/OPS_block_size_x+ 1)*((y_size-1)/OPS_block_size_y + 1);
  int maxblocks = nblocks;
  int reduct_bytes = 0;
  int reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);

  reallocReductArrays(reduct_bytes);
  reduct_bytes = 0;

  arg2.data = OPS_reduct_h + reduct_bytes;
  arg2.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg2.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg3.data = OPS_reduct_h + reduct_bytes;
  arg3.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg3.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));


  mvReductArraysToDevice(reduct_bytes);
  int dat0 = (OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  int dat1 = (OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);

  char *p_a[4];

  //set up initial pointers
  int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 4);
  ops_halo_exchanges(args,4,range);
  #endif

  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[29].mpi_time += t2-t1;
  }

  int nshared = 0;
  int nthread = OPS_block_size_x*OPS_block_size_y;

  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);

  nshared = MAX(nshared*nthread,reduct_size*nthread);

  //call kernel wrapper function, passing in pointers to data
  ops_calc_dt_kernel_get<<<grid, tblock, nshared >>> (  (double *)p_a[0], (double *)p_a[1],
           (double *)arg2.data_d, (double *)arg3.data_d,x_size, y_size);

  mvReductArraysToHost(reduct_bytes);
  if (ops_hybrid) {
    char *buf = (char*)malloc(sizeof(int)+2*2*sizeof(int*));
    *(int*)buf = maxblocks;
    *(double**)(&buf[sizeof(int)+0*2*(sizeof(int*))]) = arg2h;
    *(char**)(&buf[sizeof(int)+0*2*(sizeof(int*))+sizeof(int*)]) = arg2.data;
    arg2.data = (char *)arg2h;
    *(double**)(&buf[sizeof(int)+1*2*(sizeof(int*))]) = arg3h;
    *(char**)(&buf[sizeof(int)+1*2*(sizeof(int*))+sizeof(int*)]) = arg3.data;
    arg3.data = (char *)arg3h;
    cudaStreamAddCallback(0, calc_dt_kernel_get_reduce_callback, buf, 0);
  }
  else {
    cudaStreamSynchronize(0);
    for ( int b=0; b<maxblocks; b++ ){
      for ( int d=0; d<1; d++ ){
        arg2h[d] = arg2h[d] + ((double *)arg2.data)[d+b*1];
      }
    }
    arg2.data = (char *)arg2h;

    for ( int b=0; b<maxblocks; b++ ){
      for ( int d=0; d<1; d++ ){
        arg3h[d] = arg3h[d] + ((double *)arg3.data)[d+b*1];
      }
    }
    arg3.data = (char *)arg3h;

  }
  if (OPS_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    OPS_kernels[29].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 4);
  #endif

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    OPS_kernels[29].mpi_time += t2-t1;
    OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}

#ifdef OPS_HYBRID
void ops_par_loop_calc_dt_kernel_get_execute_cpu(ops_kernel_descriptor *desc);
void ops_par_loop_calc_dt_kernel_get_execute(ops_kernel_descriptor *desc) {
  if (desc->device == 1) {
    ops_par_loop_calc_dt_kernel_get_execute_gpu(desc);
  }
  else {
    ops_par_loop_calc_dt_kernel_get_execute_cpu(desc);
  }
}
#endif


#ifdef OPS_LAZY
void ops_par_loop_calc_dt_kernel_get(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 29;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 29;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 4;
  desc->args = (ops_arg*)malloc(4*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->args[3] = arg3;
  desc->function = ops_par_loop_calc_dt_kernel_get_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(29,"calc_dt_kernel_get");
  }
  ops_enqueue_kernel(desc);
}
#endif
