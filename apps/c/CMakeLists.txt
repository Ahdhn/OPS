cmake_minimum_required(VERSION 3.17)
project(APP C CXX)
# if APP is compiled alone then steup compilers
if (${CMAKE_PROJECT_NAME} STREQUAL APP)
    # To show the compiling process in detail
    set(CMAKE_VERBOSE_MAKEFILE on)
    # Configure Compilers
    # C
    set(CMAKE_C_STANDARD 99)
    #TODO:Shall we keep the "-g" in the release mode? It increases file size.
    if (${CMAKE_C_COMPILER_ID} STREQUAL GNU)
        set(CMAKE_C_FLAGS "-fPIC -Wall -ffloat-store")
        set(CMAKE_C_FLAGS_RELEASE "-O3 -ftree-vectorize")
        set(CMAKE_C_FLAGS_DEBUG "-O0 -g")
    elseif (${CMAKE_C_COMPILER_ID} STREQUAL Clang)
        set(CMAKE_C_FLAGS "-fPIC -DUNIX -Wall")
        set(CMAKE_C_FLAGS_RELEASE "-O3")
        set(CMAKE_C_FLAGS_DEBUG "-g -O0")
    elseif (${CMAKE_C_COMPILER_ID} STREQUAL MSVC)
        set(CMAKE_C_FLAGS "-W1")
        set(CMAKE_C_FLAGS_RELEASE "/O2 /Ot ")
        set(CMAKE_C_FLAGS_DEBUG "/Z7 /DEBUG")
    else ()
        message(FATAL_ERROR "We can't recongnise the C compiler!")
    endif ()
    # C++
    set(CMAKE_CXX_STANDARD 11)
    if (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
        set(CMAKE_CXX_FLAGS "-fPIC -Wall -ffloat-store")
        set(CMAKE_CXX_FLAGS_RELEASE "-O3")
        set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DUNIX")
    elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
        set(CMAKE_CXX_FLAGS "-fPIC -DUNIX -Wall")
        set(CMAKE_CXX_FLAGS_RELEASE "-O3")
        set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
    elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
        set(CMAKE_CXX_FLAGS "-W1")
        set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ot ")
        set(CMAKE_CXX_FLAGS_DEBUG "/Z7 /DEBUG")
    else ()
        message(FATAL_ERROR "We can't recongnise the C++ compiler!")
    endif ()

    # Try to find the required dependency
    find_package(MPI)
    find_package(HDF5)
    find_package(CUDAToolkit)
    find_package(OpenACC)
    find_package(OpenCL)
    find_package(OpenMP)
    # Configure the "include" dir for compiling
    if (HDF5_FOUND)
        include_directories(${HDF5_INCLUDE_DIRS})
    endif ()
    if (MPI_FOUND)
        include_directories(${MPI_C_INCLUDE_DIRS})
        include_directories(${MPI_CXX_INCLUDE_DIRS})
    endif ()

    if (CUDAToolkit_FOUND)
        include_directories(${CUDAToolkit_INCLUDE_DIRS})
        set(CMAKE_CUDA_COMPILER ${CUDAToolkit_NVCC_EXECUTABLE})
        enable_language(CUDA)
    endif ()

    if (OpenCL_FOUND)
        include_directories(${OpenCL_INCLUDE_DIRS})
    endif ()
    # Trying to find the OPS library
    SET (SEARCH_PATHS
    "${OPS_INSTALL_DIR}"
        /usr/local/
        /usr/
    )
    # Tyring to find the include directory
    set(OPS_HEAD ops_checkpointing.h  ops_hdf5.h  ops_lib_core.h
                  ops_opencl_reduction.h   ops_tridiag.h ops_cuda_reduction.h
                  ops_instance.h   ops_lib_cpp.h   ops_opencl_rt_support.h
                  ops_util.h ops_cuda_rt_support.h  ops_internal1.h  ops_macros.h
                  ops_seq.h  queue.h ops_exceptions.h  ops_internal2.h
                  ops_mpi_core.h  ops_seq_v2.h)
    set(OPS_INCLUDE_DIR "")
    foreach(head ${OPS_HEAD})
        unset(head_inc CACHE)
        FIND_PATH (head_inc
        NAMES ${head}
        PATHS ${SEARCH_PATHS}
        PATH_SUFFIXES include)
        if (head_inc)
            list(APPEND OPS_INCLUDE_DIR ${head_inc})
        else()
            message(FATAL_ERROR "We cannot find ${head}")
        endif()
    endforeach()
    list(REMOVE_DUPLICATES OPS_INCLUDE_DIR)
    include_directories("${OPS_INCLUDE_DIR}")
    # Trying to find the library directory
    set(OPS_LIB ops_cuda  ops_hdf5_seq  ops_mpi_cuda
        ops_opencl ops_hdf5_mpi  ops_mpi  ops_mpi_opencl ops_seq)
    foreach(library ${OPS_LIB})
        FIND_LIBRARY (${library}_FOUND
        NAMES ${library}
        PATHS ${SEARCH_PATHS}
        PATH_SUFFIXES lib)
        if (${library}_FOUND)
            unset(dir CACHE)
            get_filename_component(dir ${${library}_FOUND} DIRECTORY)
            list(APPEND OPS_LIBRARY_DIR ${dir})
        else()
            message("We cannot find ${library}")
        endif()
    endforeach()
    list(REMOVE_DUPLICATES OPS_LIBRARY_DIR)
    link_directories("${OPS_LIBRARY_DIR}")

    set(HDF5_SEQ ${HDF5_FOUND})
    if (ops_cuda_FOUND)
        set(CUDA ${CUDAToolkit_FOUND})
    endif()
    if (ops_opencl_FOUND)
        set(OPENCL ${OpenCL_FOUND})
    endif()
    if (${MPI_FOUND})
        set(MPI TRUE)
        set(HDF5_MPI ${HDF5_FOUND})
        if (ops_cuda_FOUND)
            set(CUDA_MPI ${CUDAToolkit_FOUND})
        endif()
        if (ops_opencl_FOUND)
            set(OPENCL_MPI ${OpenCL_FOUND})
        endif()
    endif()
endif()

if (${CMAKE_PROJECT_NAME} STREQUAL OPS)
    include_directories("${CMAKE_SOURCE_DIR}/ops/c/include")
    set(HDF5_SEQ ${HDF5_FOUND})
    set(CUDA ${CUDAToolkit_FOUND})
    set(OPENCL ${OpenCL_FOUND})
    if (${MPI_FOUND})
        set(MPI TRUE)
        set(HDF5_MPI ${HDF5_FOUND})
        set(CUDA_MPI ${CUDAToolkit_FOUND})
        set(OPENCL_MPI ${OpenCL_FOUND})
    endif()
endif()

macro(BUILD_OPS_C_SAMPLE Name Odd)
    # Get the file to be compiled, DEV, OPS, OTHERS
    file(GLOB DEV "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
    list(FILTER DEV EXCLUDE REGEX "ops")
    file(GLOB OPS "${CMAKE_CURRENT_SOURCE_DIR}/*ops*.cpp")
    set(OTHERS ${DEV})
    foreach(OpsFile ${OPS})
        string(REPLACE "_ops" "" NoOPS ${OpsFile})
        list(REMOVE_ITEM OTHERS ${NoOPS})
    endforeach()
    if (NOT (${Odd} STREQUAL "NONE"))
        list(FILTER OTHERS EXCLUDE REGEX ${Odd})
        list(FILTER DEV EXCLUDE REGEX ${Odd})
    endif()

    add_executable(${Name}_seq_dev ${DEV})
    target_include_directories(${Name}_seq_dev PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    add_executable(${Name}_seq ${OPS} ${OTHERS} "${CMAKE_CURRENT_SOURCE_DIR}/MPI_OpenMP/${Name}_cpu_kernels.cpp")
    target_include_directories(${Name}_seq PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    target_link_libraries(${Name}_seq ops_seq)
    target_link_libraries(${Name}_seq_dev ops_seq)
    if (HDF5_SEQ)
        target_link_libraries(${Name}_seq ops_hdf5_seq ${HDF5_LIBRARIES})
        target_link_libraries(${Name}_seq_dev ops_hdf5_seq ${HDF5_LIBRARIES})
    endif()

    if (CUDA)
        add_executable(${Name}_cuda ${OPS} ${OTHERS} "${CMAKE_CURRENT_SOURCE_DIR}/CUDA/${Name}_kernels.cu")
        target_include_directories(${Name}_cuda PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
        target_link_libraries(${Name}_cuda CUDA::cudart_static ops_cuda)
        if (HDF5_SEQ)
            target_link_libraries(${Name}_cuda ops_hdf5_seq ${HDF5_LIBRARIES})
        endif()
    endif()

    if (OPENCL)
        add_executable(${Name}_opencl ${OPS} ${OTHERS} "${CMAKE_CURRENT_SOURCE_DIR}/OpenCL/${Name}_opencl_kernels.cpp")
        target_include_directories(${Name}_opencl PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
        target_link_libraries(${Name}_opencl  ${OpenCL_LIBRARIES} ops_opencl)
        if (HDF5_SEQ)
            target_link_libraries(${Name}_opencl ops_hdf5_seq ${HDF5_LIBRARIES})
        endif()
    endif()
    if (MPI)
        add_executable(${Name}_mpi_dev ${DEV})
        target_include_directories(${Name}_mpi_dev PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
        target_compile_definitions(${Name}_mpi_dev PRIVATE "-DOPS_MPI")
        add_executable(${Name}_mpi ${OPS} ${OTHERS} "${CMAKE_CURRENT_SOURCE_DIR}/MPI_OpenMP/${Name}_cpu_kernels.cpp")
        target_include_directories(${Name}_mpi PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
        target_compile_definitions(${Name}_mpi PRIVATE "-DOPS_MPI")
        target_link_libraries(${Name}_mpi ops_mpi MPI::MPI_CXX)
        target_link_libraries(${Name}_mpi_dev ops_mpi MPI::MPI_CXX)
        if (HDF5_MPI)
            target_link_libraries(${Name}_mpi ops_hdf5_mpi ${HDF5_LIBRARIES} MPI::MPI_CXX)
            target_link_libraries(${Name}_mpi_dev ops_hdf5_mpi ${HDF5_LIBRARIES} MPI::MPI_CXX)
        endif()
        if (CUDA_MPI)
            add_executable(${Name}_mpi_cuda ${OPS} ${OTHERS} "${CMAKE_CURRENT_SOURCE_DIR}/CUDA/${Name}_kernels.cu")
            target_include_directories(${Name}_mpi_cuda PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
            target_compile_definitions(${Name}_mpi_cuda PRIVATE "-DOPS_MPI")
            target_link_libraries(${Name}_mpi_cuda CUDA::cudart_static ops_mpi_cuda MPI::MPI_CXX)
            if (HDF5_MPI)
                target_link_libraries(${Name}_mpi_cuda ops_hdf5_mpi ${HDF5_LIBRARIES} MPI::MPI_CXX)
            endif()
        endif()

        if (OPENCL_MPI)
            add_executable(${Name}_mpi_opencl ${OPS} ${OTHERS} "${CMAKE_CURRENT_SOURCE_DIR}/OpenCL/${Name}_opencl_kernels.cpp")
            target_include_directories(${Name}_mpi_opencl PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
            target_compile_definitions(${Name}_mpi_opencl PRIVATE "-DOPS_MPI")
            target_link_libraries(${Name}_mpi_opencl  ${OpenCL_LIBRARIES} ops_mpi_opencl MPI::MPI_CXX)
            if (HDF5_MPI)
                target_link_libraries(${Name}_mpi_opencl ops_hdf5_mpi ${HDF5_LIBRARIES} MPI::MPI_CXX)
            endif()
        endif()
    endif()
endmacro()


# add_subdirectory(access)
add_subdirectory(CloverLeaf)
#add_subdirectory(CloverLeaf_3D)
#add_subdirectory(CloverLeaf_3D_HDF5)
#add_subdirectory(complex_numbers)
#add_subdirectory(laplace2d_tutorial)
# add_subdirectory(lowdim_test)
# add_subdirectory(mblock)
#add_subdirectory(mblock4D)
# add_subdirectory(mb_shsgc)
#add_subdirectory(mgrid)
#add_subdirectory(multiDim)
#add_subdirectory(multiDim3D)
#add_subdirectory(multiDim_HDF5)
add_subdirectory(poisson)
# add_subdirectory(shsgc)
#add_subdirectory(TeaLeaf)
