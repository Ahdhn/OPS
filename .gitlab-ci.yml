# Defines stages which are to be executed
stages:
  - API_Build
  - APP_Build
  - test
  - docs
  - clean

# Stage "build"
build:GNU:API:
  stage: API_Build
  tags:
    - CCP, test
  script:
    - mkdir build
    - cd build
    - cmake ../  -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/OPS-INSTALL
    - cmake --build . -j 4
    - cmake --install .
  artifacts:
    expire_in: 1 week
    paths:
    - $CI_PROJECT_DIR/OPS-INSTALL

build:Intel:API:
  stage: API_Build
  tags:
    - CCP, test
  script:
    - source /opt/intel/oneapi/setvars.sh
    - export OMPI_MPICC=icc
    - export OMPI_MPICXX=icpc
    - export CC=icc
    - export CXX=icpc
    - |-
      git clone https://github.com/OP-DSL/tridsolver.git
      cd $CI_PROJECT_DIR/tridsolver
      mkdir build
      cd build
      cmake ../scalar  -DCMAKE_BUILD_TYPE=Release -DBUILD_FOR_CPU=ON -DBUILD_FOR_GPU=ON -DBUILD_FOR_MPI=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DBUILD_FOR_SN=ON -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/tridlib
      cmake --build .
      cmake --install .
      cd $CI_PROJECT_DIR/
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CI_PROJECT_DIR/tridlib/libtrid/lib:/usr/local/hdf5-intel/lib
    - mkdir build-intel
    - cd build-intel
    - cmake ../  -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/OPS-INSTALL-Intel -DHDF5_ROOT=/usr/local/hdf5-intel -DLIBTRID_PATH=$CI_PROJECT_DIR/tridlib/libtrid
    - cmake --build . -j 4
    - cmake --install .
  artifacts:
    expire_in: 1 week
    paths:
    - $CI_PROJECT_DIR/OPS-INSTALL-Intel

build:GNU:APP:
  stage: APP_Build
  tags:
    - CCP, test
  script:
    - git clone https://github.com/opensbli/opensbli.git
    - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR/opensbli/
    - |-
      cd $CI_PROJECT_DIR/opensbli/apps
      echo dir=\$1 > translate.sh
      echo pyfile=\$2 >> translate.sh
      echo "cd \$dir" >> translate.sh
      echo "python \$pyfile" >> translate.sh
      echo "head -n-3 opensbli.cpp > tmp.cpp"  >> translate.sh
      echo "echo \"ops_printf(\\\"PASSED\!\\\\\\\\\\\\n\\\");\" >> tmp.cpp " >> translate.sh
      echo "tail -n3 opensbli.cpp >> tmp.cpp" >> translate.sh
      echo "cp tmp.cpp  opensbli.cpp"  >> translate.sh
      echo "rm tmp.cpp" >> translate.sh
      echo "echo \"cmake_minimum_required(VERSION 3.18)\" > CMakeLists.txt" >> translate.sh
      echo "echo \"CreateTempDir()\" >> CMakeLists.txt"  >> translate.sh
      echo "echo \"BUILD_OPS_C_SAMPLE(\$3 \\\"NONE\\\" \\\"NONE\\\" \\\"NONE\\\"  \\\"NO\\\" \\\"YES\\\")\" >> CMakeLists.txt"  >> translate.sh
      echo "cd \$CI_PROJECT_DIR/opensbli/apps" >> translate.sh
      echo "cp \$dir \$CI_PROJECT_DIR/apps/c -r" >> translate.sh
      cat translate.sh
      source translate.sh taylor_green_vortex taylor_green_vortex.py tgv
      echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      echo "add_subdirectory(taylor_green_vortex)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # source translate.sh channel_flow/laminar_2D laminar_channel.py laminar2d
      # echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # echo "add_subdirectory(laminar_2D)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      cd $CI_PROJECT_DIR
    - mkdir appbuild
    - cd appbuild
    - cmake ../apps/c -DOPS_INSTALL_DIR=$CI_PROJECT_DIR/OPS-INSTALL -DAPP_INSTALL_DIR=$CI_PROJECT_DIR/OPS-APP
    - cmake --build . -j 12
    - cmake --install .
  dependencies:
    - build:GNU:API
  except:
    - master

build:Intel:APP:
  stage: APP_Build
  tags:
    - CCP, test
  script:
    - git clone https://github.com/opensbli/opensbli.git
    - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR/opensbli/
    - |-
      cd $CI_PROJECT_DIR/opensbli/apps
      echo dir=\$1 > translate.sh
      echo pyfile=\$2 >> translate.sh
      echo "cd \$dir" >> translate.sh
      echo "python \$pyfile" >> translate.sh
      echo "head -n-3 opensbli.cpp > tmp.cpp"  >> translate.sh
      echo "echo \"ops_printf(\\\"PASSED\!\\\\\\\\\\\\n\\\");\" >> tmp.cpp " >> translate.sh
      echo "tail -n3 opensbli.cpp >> tmp.cpp" >> translate.sh
      echo "cp tmp.cpp  opensbli.cpp"  >> translate.sh
      echo "rm tmp.cpp" >> translate.sh
      echo "echo \"cmake_minimum_required(VERSION 3.18)\" > CMakeLists.txt" >> translate.sh
      echo "echo \"CreateTempDir()\" >> CMakeLists.txt"  >> translate.sh
      echo "echo \"BUILD_OPS_C_SAMPLE(\$3 \\\"NONE\\\" \\\"NONE\\\" \\\"NONE\\\" \\\"NO\\\" \\\"YES\\\")\" >> CMakeLists.txt"  >> translate.sh
      echo "cd \$CI_PROJECT_DIR/opensbli/apps" >> translate.sh
      echo "cp \$dir \$CI_PROJECT_DIR/apps/c -r" >> translate.sh
      cat translate.sh
      source translate.sh taylor_green_vortex taylor_green_vortex.py tgv
      echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      echo "add_subdirectory(taylor_green_vortex)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # source translate.sh channel_flow/laminar_2D laminar_channel.py laminar2d
      # echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # echo "add_subdirectory(laminar_2D)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      cd $CI_PROJECT_DIR
    - source /opt/intel/oneapi/setvars.sh
    - export OMPI_MPICC=icc
    - export OMPI_MPICXX=icpc
    - export CC=icc
    - export CXX=icpc
    - |-
      git clone https://github.com/OP-DSL/tridsolver.git
      cd $CI_PROJECT_DIR/tridsolver
      mkdir build
      cd build
      cmake ../scalar  -DCMAKE_BUILD_TYPE=Release -DBUILD_FOR_CPU=ON -DBUILD_FOR_GPU=ON -DBUILD_FOR_MPI=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DBUILD_FOR_SN=ON -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/tridlib
      cmake --build .
      cmake --install .
      cd $CI_PROJECT_DIR/
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CI_PROJECT_DIR/tridlib/libtrid/lib:/usr/local/hdf5-intel/lib
    - mkdir appbuild-intel
    - cd appbuild-intel
    - cmake ../apps/c -DOPS_INSTALL_DIR=$CI_PROJECT_DIR/OPS-INSTALL-Intel -DAPP_INSTALL_DIR=$CI_PROJECT_DIR/OPS-APP-Intel -DHDF5_ROOT=/usr/local/hdf5-intel -DLIBTRID_PATH=$CI_PROJECT_DIR/tridlib/libtrid
    - cmake --build . -j 12
    - cmake --install .
  dependencies:
    - build:Intel:API
  except:
    - master

#Stage "test"
test:GNU:
  stage: test
  tags:
    - CCP,test
  dependencies:
    - build:GNU:API
  script:
    - git clone https://github.com/opensbli/opensbli.git
    - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR/opensbli/
    - |-
      cd $CI_PROJECT_DIR/opensbli/apps
      echo dir=\$1 > translate.sh
      echo pyfile=\$2 >> translate.sh
      echo "cd \$dir" >> translate.sh
      echo "python \$pyfile" >> translate.sh
      echo "head -n-3 opensbli.cpp > tmp.cpp"  >> translate.sh
      echo "echo \"ops_printf(\\\"PASSED\!\\\\\\\\\\\\n\\\");\" >> tmp.cpp " >> translate.sh
      echo "tail -n3 opensbli.cpp >> tmp.cpp" >> translate.sh
      echo "cp tmp.cpp  opensbli.cpp"  >> translate.sh
      echo "rm tmp.cpp" >> translate.sh
      echo "echo \"cmake_minimum_required(VERSION 3.18)\" > CMakeLists.txt" >> translate.sh
      echo "echo \"CreateTempDir()\" >> CMakeLists.txt"  >> translate.sh
      echo "echo \"BUILD_OPS_C_SAMPLE(\$3 \\\"NONE\\\" \\\"NONE\\\" \\\"NONE\\\"  \\\"NO\\\" \\\"YES\\\")\" >> CMakeLists.txt"  >> translate.sh
      echo "cd \$CI_PROJECT_DIR/opensbli/apps" >> translate.sh
      echo "cp \$dir \$CI_PROJECT_DIR/apps/c -r" >> translate.sh
      cat translate.sh
      source translate.sh taylor_green_vortex taylor_green_vortex.py tgv
      echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      echo "add_subdirectory(taylor_green_vortex)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # source translate.sh channel_flow/laminar_2D laminar_channel.py laminar2d
      # echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # echo "add_subdirectory(laminar_2D)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      cd $CI_PROJECT_DIR
    - mkdir appbuild
    - cd appbuild
    - cmake ../apps/c -DOPS_INSTALL_DIR=$CI_PROJECT_DIR/OPS-INSTALL -DAPP_INSTALL_DIR=$CI_PROJECT_DIR/OPS-APP -DOPS_TEST=ON  -DGPU_NUMBER=1
    - cmake --build . -j 12
    - ctest
  artifacts:
    expire_in: 1 week
    paths:
    - appbuild/Testing/Temporary
  only:
    - master

test:Intel:
  stage: test
  tags:
    - CCP,test
  dependencies:
    - build:Intel:API
  script:
    - git clone https://github.com/opensbli/opensbli.git
    - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR/opensbli/
    - |-
      cd $CI_PROJECT_DIR/opensbli/apps
      echo dir=\$1 > translate.sh
      echo pyfile=\$2 >> translate.sh
      echo "cd \$dir" >> translate.sh
      echo "python \$pyfile" >> translate.sh
      echo "head -n-3 opensbli.cpp > tmp.cpp"  >> translate.sh
      echo "echo \"ops_printf(\\\"PASSED\!\\\\\\\\\\\\n\\\");\" >> tmp.cpp " >> translate.sh
      echo "tail -n3 opensbli.cpp >> tmp.cpp" >> translate.sh
      echo "cp tmp.cpp  opensbli.cpp"  >> translate.sh
      echo "rm tmp.cpp" >> translate.sh
      echo "echo \"cmake_minimum_required(VERSION 3.18)\" > CMakeLists.txt" >> translate.sh
      echo "echo \"CreateTempDir()\" >> CMakeLists.txt"  >> translate.sh
      echo "echo \"BUILD_OPS_C_SAMPLE(\$3 \\\"NONE\\\" \\\"NONE\\\" \\\"NONE\\\"  \\\"NO\\\" \\\"YES\\\")\" >> CMakeLists.txt"  >> translate.sh
      echo "cd \$CI_PROJECT_DIR/opensbli/apps" >> translate.sh
      echo "cp \$dir \$CI_PROJECT_DIR/apps/c -r" >> translate.sh
      cat translate.sh
      source translate.sh taylor_green_vortex taylor_green_vortex.py tgv
      echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      echo "add_subdirectory(taylor_green_vortex)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # source translate.sh channel_flow/laminar_2D laminar_channel.py laminar2d
      # echo " " >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      # echo "add_subdirectory(laminar_2D)" >> $CI_PROJECT_DIR/apps/c/CMakeLists.txt
      cd $CI_PROJECT_DIR
    - source /opt/intel/oneapi/setvars.sh
    - export OMPI_MPICC=icc
    - export OMPI_MPICXX=icpc
    - export CC=icc
    - export CXX=icpc
    - |-
      git clone https://github.com/OP-DSL/tridsolver.git
      cd $CI_PROJECT_DIR/tridsolver
      mkdir build
      cd build
      cmake ../scalar  -DCMAKE_BUILD_TYPE=Release -DBUILD_FOR_CPU=ON -DBUILD_FOR_GPU=ON -DBUILD_FOR_MPI=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DBUILD_FOR_SN=ON -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/tridlib
      cmake --build .
      cmake --install .
      cd $CI_PROJECT_DIR/
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CI_PROJECT_DIR/tridlib/libtrid/lib:/usr/local/hdf5-intel/lib
    - mkdir appbuild-intel
    - cd appbuild-intel
    - cmake ../apps/c  -DOPS_INSTALL_DIR=$CI_PROJECT_DIR/OPS-INSTALL-Intel -DAPP_INSTALL_DIR=$CI_PROJECT_DIR/OPS-APP-Intel -DOPS_TEST=ON  -DGPU_NUMBER=1 -DHDF5_ROOT=/usr/local/hdf5-intel -DLIBTRID_PATH=$CI_PROJECT_DIR/tridlib/libtrid
    - cmake --build . -j 12
    - ctest
  artifacts:
    expire_in: 1 week
    paths:
    - appbuild-intel/Testing/Temporary
  only:
    - master

# #Stage "docs"
# make-docs:
#   stage: docs
#   when: always
#   tags:
#     - CCP, test
#   script:
#     - cd doc && make all clean
#   artifacts:
#     expire_in: 4 week
#     paths:
#       - doc/user.pdf
#       - doc/ops/html
#       - doc/ops/latex/refman.pdf
#       - doc/ops_translator/html
#       - doc/ops_translator/latex/refman.pdf

pages:
  stage: docs
  when: always
  tags:
    - CCP, test
  script:
  - cd doc
  - doxygen ops/Doxyfile
  - mv ops/html/ $CI_PROJECT_DIR/public/
  artifacts:
    paths:
    - public

